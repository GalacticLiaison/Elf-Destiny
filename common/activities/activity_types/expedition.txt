# Choose Location From Map
	# Will be holy sites
	# First ever expedition will be to where "Seal Of The Realm lord Is"
# Travel To Location


# BOSS FIGHTS
# - send in your knights 1:1 to fight the beast
# "Sir Lancelot steps in..."
# create special duel type
# instead of refreshing to show you over and over, it chooses a knight for each move.
# enemy attack works the same as always
# at end of fight hand out injuries/death statuses
# at end of fight hand out adventurer experience


activity_expedition = {
	# Will it appear as a menu option
	is_shown = {
		# is_landed = yes
		is_ai = no
		spoken_with_the_archeologist = yes
	}

	# Can it be started? false things here are tooltips why not.
	can_start_showing_failures_only = {
		is_available_adult = yes
	}

	# Is the event still good to continue?
	is_valid = {
		scope:host = {
			is_alive = yes
			is_imprisoned = no
			# is_landed = yes 
			NOT = { is_incapable = yes }
		}
	}

	# When the event cant be continued, what happens
	on_invalidated = {
	}

	cooldown = { years = standard_expedition_cooldown_time }

	cost = {
		gold = {
			add = {
				add = {
					value = expedition_activity_base_cost #Base level
					desc = expedition_base_cost
				}
				add = {
					value = expedition_activity_base_cost
					multiply = activity_cost_scale_by_era
					subtract = expedition_activity_base_cost
					desc = activity_cost_scale_by_era_desc
				}
			}
		}
	}

	ui_predicted_cost = {
		# All costs are balanced on County/Early Era starting point
		gold = {
			add = { # Base cost, scaled by era
				value = expedition_activity_base_cost
				multiply = activity_cost_scale_by_era
			}
			
			# Options 
			add = { # Attendants 
				value = 0 # Skeleton Crew Cost (You and one/two others)
				add = 10 # Squad (You and a retinue of knights)
				# add = 35 # local guides
				# Scale option costs by tier and era
				multiply = activity_cost_scale_by_tier
				multiply = activity_cost_scale_by_era
				# Divide by the number of option levels to get an average option cost
				divide = 2
			}
			add = { # Funding
				value = 0 # Bare Bones
				add = 10 # Well Stocked
				add = 35 # Comforts from home
				# Scale option costs by tier and era
				multiply = activity_cost_scale_by_tier
				multiply = activity_cost_scale_by_era
				# Divide by the number of option levels to get an average option cost
				divide = 3
			}

			# Make it a multiple of 5 (rounded up)
			divide = 5
			ceiling = yes
			multiply = 5

			if = {
				limit = {
					culture = {
						has_cultural_tradition = tradition_adventurer_guilds 
					}
				}
				divide = 2
			}
		}
	}

	# TODO VVVVVV
	on_host_death = {
		# scope:activity = {
		# 	save_scope_as = death_invalidation
		# 	if = {
		# 		limit = {
		# 			has_activity_option = { category = special_type option = hunt_type_legendary }
		# 		}
		# 		save_scope_as = legendary_invalidation
		# 	}
		# }
		# scope:host = {
		# 	save_scope_as = invalidated_flavor
		# 	player_heir ?= {
		# 		save_scope_as = heir
		# 		add_character_flag = {
		# 			flag = hunt_heir
		# 			weeks = 1
		# 		}
		# 		trigger_event = { id = hunt.0080 days = 1 }
		# 	}
		# }
	}

	ai_will_do = {
		value = 0
	}

	host_description = {
		desc = activity_expedition_host_desc
		# desc = activity_expedition_host_desc_prestige
		triggered_desc = {
			trigger = {
				NOT = {
					any_held_county = {
						any_county_province = {
							NOT = { exists = var:recent_expedition_held }
						}
					}
				}
			}
			desc = activity_expedition_host_desc_recent
		}
	}

	conclusion_description = {
		first_valid = {
			desc = expedition.conclusion
		}
	}

	###################
	# PARAMETERS
	###################

	is_grand_activity = no

	is_single_location = yes

	###################
	# LOCATION
	###################

	province_filter = all # hate to use all because its slow but I have to, also only player can do expeditions
	ai_province_filter = domain

	is_location_valid = {
		trigger_if = {
			limit = {
				NOT = {
					has_global_variable = 01_sigil_of_the_realm_lord_found
				}
			}
			custom_tooltip = { # fortress_tomb_of_the_dead_emperor
				text = not_an_expedition_site

				OR = {
					AND = {
						exists = barony	
						barony = title:b_bellinzona 
					}
					AND = {
						exists = barony	
						barony = title:b_intarta
					}
					AND = {
						exists = barony	
						barony = title:b_simbiling
					}
					AND = {
						exists = barony	
						barony = title:b_dayan
					}
					AND = {
						exists = barony	
						barony = title:b_atakpame
					}
					AND = {
						exists = barony	
						barony = title:b_kasriskari
					}
					AND = {
						exists = barony	
						barony = title:b_northri_gudbrandsdali
					}
					# Atlantis
					AND = {
						exists = barony	
						barony = title:b_brest
					}
				}
			}

		}
		trigger_if = {
			limit = {
				has_global_variable = 01_sigil_of_the_realm_lord_found
			}
			custom_tooltip = {
				text = not_an_expedition_site

				AND = {
					exists = barony	
					is_target_in_global_variable_list = {
                        name = spark_holy_sites
                        target = barony
                    }
					# global_var:last_emperor_tomb_province.barony = barony
				}

				NOT = {
					is_target_in_global_variable_list = {
						name = first_expedition_location_candidates
						target = barony
					}
				}
			}
		}
	}

	###################
	# GRAPHICS
	###################

	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_hunt_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_hunt_01_entity"
	}

	map_entity = "building_western_hunt_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			NOT = { scope:host.location = scope:activity.activity_location }
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}

	# End Travel

	background = { # Snowy Forest
		trigger = {
			activity_location = { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Mountains
		trigger = {
			activity_location = { graphical_wilderness_mountains_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { # Steppe
		trigger = {
			activity_location = { graphical_wilderness_steppe_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #Desert
		trigger = {
			activity_location = { graphical_wilderness_desert_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { # Jungle
		trigger = {
			activity_location = { graphical_wilderness_jungle_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { # Drylands
		trigger = {
			activity_location = { graphical_drylands_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { # Camp
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_poachers_camp.dds"
		environment = "environment_event_forest_pine" 
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	### Plug in widgets
	activity_window_widgets = {
		# hunt_success_chance = "activity_plugin_widgets_summary"
		artifact_rewards = "activity_plugin_widgets_conclusion"
		trait_rewards = "activity_plugin_widgets_conclusion"
	}

	window_characters = {
		adventurer = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:master_of_hunt_court_position
									this = scope:host.court_position:master_of_hunt_court_position
								}
								AND = {
									exists = var:animal_slayer
									this = var:animal_slayer
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = hunting_knife_start
			}
		}

		adventurer = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:master_of_hunt_court_position
									this = scope:host.court_position:master_of_hunt_court_position
								}
								AND = {
									exists = var:animal_slayer
									this = var:animal_slayer
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = hunting_knife_start
			}
		}

		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = idle
			}
		}
		
		adventurer = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:master_of_hunt_court_position
									this = scope:host.court_position:master_of_hunt_court_position
								}
								AND = {
									exists = var:animal_slayer
									this = var:animal_slayer
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = hunting_knife_start
			}
		}

		adventurer = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:player ?= {
							NOR = {
								this = scope:host
								AND = {
									exists = scope:host.court_position:master_of_hunt_court_position
									this = scope:host.court_position:master_of_hunt_court_position
								}
								AND = {
									exists = var:animal_slayer
									this = var:animal_slayer
								}
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						any_attending_character = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOT = {
								this = scope:host
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else = {
					if = {
						limit = {
							scope:host.location = scope:activity.activity_location
						}
						every_attending_character = {
							limit = {
								location = scope:activity.activity_location
								NOR = {
									this = scope:host
									has_court_position = master_of_hunt_court_position
								}
							}
							add_to_list = characters
						}
					}
				}
			}
			scripted_animation = {
				#Fallback
				animation = hunting_knife_start
			}
		}
	}

	###################
	# OPTIONS
	###################

	# special_option_category = special_type

	options = {

		#########
		# FUNDING - How Long Can The Expedition Go For?
		#########
		expedition_option_funding = {
			# Two Expedition Attempts
			expedition_funding_min = {
				default = yes

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_funding_min_option_cost
								desc = expedition_funding_min
							}
						}
					}
				}

				ai_will_do = {
					value = 0
				}
			}
			# Three Expedition Attempts
			expedition_funding_mid = {
				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.expedition_funding_mid_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_funding_mid_option_cost
								desc = expedition_funding_mid
							}
						}
					}
				}

				ai_will_do = {
					value = 0
				}
			}
			# Five Expedition Attempts
			expedition_funding_max = {
				is_valid = {
					can_make_expensive_purchase_trigger = {
						PRICE = root.expedition_funding_max_option_cost
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_funding_max_option_cost
								desc = expedition_funding_max
							}
						}
					}
				}

				ai_will_do = {
					value = 0
				}
			}
		}

		#########
		# ADVENTURER COUNT - Whos Coming Along?
		#########
		expedition_option_party_size = { # TODO_CD_EP2 awaiting code support TIT-43076
			expedition_party_size_min = {
				default = yes

				# Entourage option grabbing suitable bodyguards & maybe someone from court who really likes you, + randos.
				travel_entourage_selection = { 
					weight = expedition_entourage_base_set_weighting_value
					max = 3
   					invite_rule_order = 2
				}

				ai_will_do = {
					value = 0
				}
			}
			expedition_party_size_mid = {
				cost = {
					gold = {
						add = {
							add = {
								value = expedition_funding_mid_option_cost
								desc = expedition_party_size_normal
							}
						}
					}
				}

				#Entourage option grabbing most people suitable from court, + randos.
				travel_entourage_selection = {
					weight = {
						add = expedition_entourage_base_set_weighting_value
						add = expedition_entourage_extras_set_weighting_value
					}
					max = 5
   					invite_rule_order = 2
				}

				ai_will_do = {
					value = 0
				}
			}
			expedition_party_size_max = {
				# is_shown = { has_dlc_feature = advanced_activities }

				cost = {
					gold = {
						add = {
							add = {
								value = expedition_funding_max_option_cost
								desc = expedition_party_size_many
							}
						}
					}
				}

				#Entourage option grabbing sodding everyone suitable from court, + every grabbable rando in the duchy and maybe a few extra.
				travel_entourage_selection = {
					weight = {
						add = expedition_entourage_base_set_weighting_value
						add = expedition_entourage_extras_set_weighting_value
						add = expedition_entourage_max_set_weighting_value
					}

					max = 7
   					invite_rule_order = 2
				}

				ai_will_do = {
					value = 0
				}
			}
		}
	}

	###################
	# PHASES
	###################

	max_guest_arrival_delay_time = { months = 8 }

	phases = {
		# Give Player option to roll once every week, just make phase progression time long enough to contain all possible rolls
		# if player finishes after say just one roll, well then they may just have to wait a few extra weeks before heading home

		base_camp_phase = {
			is_predefined = yes

			is_shown = {}

			on_phase_active = { # Fires for every attendee
				if = {
					limit = { this = scope:host }

					# Set initial status
					scope:activity = {
						set_variable = {
							name = status
							value = flag:inital
						}

						set_variable = {
							name = expedition_gold_reward 
							value = 0
						}
					}

					scope:activity.activity_location = { save_scope_as = activity_location }

					# How Long Is The Total Expedition?

					# set_variable  = {
					# 	name = expedition_weeks 
					# 	value = total_expedition_weeks
					# }
					if = {
						limit = {
							scope:host = {
								any_character_artifact = { 
									has_variable = lembas_satchel
									is_equipped = yes
								}
							}
						}
						debug_log = "wearing belt"
					}

					scope:activity = { progress_activity_phase_after = { weeks = total_expedition_weeks} }

					# Fires Immediatly - Lets Set Up Our Base Camp
					trigger_event = { on_action = set_up_base_camp_events }

					## Funding Will Determine how many weeks we can stay out ##
					# Min Funding
					trigger_event = {
						on_action = expedition_events
						days = 7
					}
					trigger_event = {
						on_action = expedition_events
						days = 14
					}

					# Mid Funding
					if = {
						limit = {
							total_expedition_weeks >= 4
						}
						debug_log = "mid funding"
						trigger_event = {
							on_action = expedition_events
							days = 21
						}
					}

					# Max Funding
					if = {
						limit = {
							total_expedition_weeks >= 5
						}
						debug_log = "max funding 1"
						trigger_event = {
							on_action = expedition_events
							days = 28
						}
					}

					# Max Funding
					if = {
						limit = {
							total_expedition_weeks >= 6
						}
						debug_log = "max funding 2"
						trigger_event = {
							on_action = expedition_events
							days = 35
						}
					}

					# Obtainable with lembas satchel
					if = {
						limit = {
							total_expedition_weeks >= 8
						}
						debug_log = "lembas 1"
						trigger_event = {
							on_action = expedition_events
							days = 42
						}
					}

					# Obtainable with lembas satchel
					if = {
						limit = {
							total_expedition_weeks >= 9
						}
						debug_log = "lembas 2"
						trigger_event = {
							on_action = expedition_events
							days = 49
						}
					}
				}
			}

			# on_weekly_pulse = { # Fires for every attendee
			# }

			on_end = { # Fires for every attendee
				scope:activity.activity_location = { save_scope_as = activity_location }
				if = {
					limit = { this = scope:host }
					scope:activity = {

						add_activity_log_entry = {
							key = hunt_completed_success_log
							score = 80
							tags = { complete good }
							character = scope:host
							show_in_conclusion = yes
							# EFFECT
							scope:host = { disburse_expedition_activity_rewards = yes }
						}

                        if = {
                            limit = {
                                scope:activity.activity_location.barony = title:b_brest
                            }
                            scope:host = { trigger_event = atlantis_expedition.006 }
                        }
                        else = {
						scope:host = { trigger_event = expedition.006 }
                        }
					}
				}
			}
		}
	}

	ai_check_interval = 60

	ai_will_select_province = {
		value = 50
		add = {
			value = scope:score # Derived from province_score
			multiply = 10
		}
	}

	###################
	# GUEST HANDLING
	###################

	guest_invite_rules = {
		rules = {
			2 = activity_invite_rule_lovers
			# 3 = activity_invite_rule_knights
			4 = activity_invite_rule_guests
			2 = activity_invite_rule_liege
			2 = activity_invite_rule_fellow_vassals
			
			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			3 = activity_invite_rule_vassals
			1 = activity_invite_rule_friends
			2 = activity_invite_rule_knights
			2 = activity_invite_immediate_family
			3 = activity_invite_rule_extended_family
			4 = activity_invite_rule_courtiers
		}
	}

	max_guests = 7

	can_be_activity_guest = {
		age > 11
		NOT = { has_trait = incapable }
		in_diplomatic_range = scope:host
	}

	host_intents = {
		intents = { reduce_stress_intent }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_intents = {
		intents = { reduce_stress_intent  }
		default = reduce_stress_intent
		player_defaults = { reduce_stress_intent }
	}

	guest_join_chance = {
		base = 10
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes 
		activity_guest_expedition_ai_accept_modifier = yes
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################

	pulse_actions = {

	}

	on_start = {
		scope:activity = {
			set_variable = {
				name = trial_attempted
				value = flag:false
			}
			set_variable = {
				name = second_trial_attempted
				value = flag:false
			}
		}

		if = {
			limit = {
				NOT = {
					exists = global_var:discovered_ancient_tradition_count
				}
			}
			debug_log = "SETTING discovered_ancient_tradition_count"
			set_global_variable = {
				name = discovered_ancient_tradition_count 
				value = 0
			}
		}
		else = {
			debug_log = "discovered_ancient_tradition_count was already set"
		}
	}

	allow_zero_guest_invites = yes

	on_enter_passive_state = {

	}

	on_enter_active_state = {

	}

	on_complete = {

	}
}