@weight_up_ai_select_province_small = 10
@weight_up_ai_select_province_medium = 50
@weight_up_ai_select_province_large = 250
@weight_up_ai_select_province_massive = 500

@feast_cost_gold_low = 0
@feast_cost_gold_medium = 0
@feast_cost_gold_high = 0

activity_entrance_feast = {
	is_shown = {
		highest_held_title_tier > tier_barony
		is_landed = yes

		trigger_if = {
			limit = {
				is_ai = no
			}
			any_scheme = {
				scheme_type = entrance
			}
		}

		# trigger_if = {
		# 	limit = {
		# 		is_ai = yes
		# 	}
		# 	is_at_war = no
		# 	OR = {
		# 		has_character_flag = feasts_a_lot
		# 		short_term_gold >= feast_activity_cost
		# 	}
		# }
	}

	can_start_showing_failures_only = {
		# is_available_adult = yes
	}

	is_valid = {
		scope:host = {
			is_alive = yes
			# is_capable_adult = yes
			# is_imprisoned = no
			is_landed = yes
			# NOT = { is_incapable = yes }
		}
		# If no one shows up
		trigger_if = {
			limit = {
				is_current_phase_active = yes
			}
			has_attending_activity_guests = yes
		}
	}
	
	on_host_death = {
		every_attending_character = {
			limit = { is_alive = yes }
			trigger_event = {
				id = feast.5003
				days = 1 # So you don't get spammed
			}
		}
		# Code sends your entourage home on invalidated
		scope:activity.var:host_var = {
			# Saving the title for loc
			primary_title = { save_scope_as = host_title }
			# Inform your heir if you have one
			player_heir ?= {
				trigger_event = {
					id = feast.0800
					days = 1
				}
			}
		}
	}

	on_invalidated = {
		debug_log = "ENTRANCE feast got invalidated"

		if = {
			limit = {
				scope:host = { is_imprisoned = yes }
			}
			#Host has been imprisoned
			every_attending_character = {
				limit = {
					NOT = { this  = scope:host }
				}
				trigger_event = feast.5005
			}
			scope:host = { trigger_event = feast.5004 }
		}
		if = {
			limit = {
				scope:host = { is_incapable = yes }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			scope:host = {
				trigger_event = activity_system.0330
			}
			every_attending_character = {
				limit = { NOT = { this = scope:host } }
				trigger_event = activity_system.0331
			}
		}
		if = { # No one shows up
			limit = {
				has_attending_activity_guests = no
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
				activity_location = { save_scope_as = location }
			}
			scope:host = { trigger_event = feast.2003 }
		}
		# Accolade stuff
		if = {
			limit = {
				any_attending_character = {
					has_character_modifier = accolade_charmer_party_modifier
				}
			}
			every_attending_character = {
				limit = {
					has_character_modifier = accolade_charmer_party_modifier
				}
				remove_character_modifier = accolade_charmer_party_modifier
			}
		}
		if = {
			limit = {
				any_attending_character = {
					has_character_modifier = accolade_charmer_party_high_modifier
				}
			}
			every_attending_character = {
				limit = {
					has_character_modifier = accolade_charmer_party_high_modifier
				}
				remove_character_modifier = accolade_charmer_party_high_modifier
			}
		}
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
	}

	###################
	# PARAMETERS
	###################

	is_grand_activity = no
	is_single_location = yes

	province_filter = domain
	ai_province_filter = capital

	max_route_deviation_mult = 2.0

	is_location_valid = {
		# has_holding = yes
	}

	province_description = {
		desc = activity_feast_province_desc
		# +++ / triple plus good
		triggered_desc = {
			trigger = { has_building_or_higher = citadel_of_aleppo_01 }
			desc = activity_feast_province_desc_citadel_of_aleppo
		}
		triggered_desc = {
			trigger = { has_building_or_higher = palace_of_aachen_01 }
			desc = activity_feast_province_desc_palace_of_aachen
		}
		triggered_desc = {
			trigger = { has_building_or_higher = doges_palace_01 }
			desc = activity_feast_province_desc_doges_palace
		}
		triggered_desc = {
			trigger = { has_building_or_higher = leisure_palace_01 }
			desc = activity_feast_province_desc_leisure_palace
		}
		triggered_desc = {
			trigger = { has_building_or_higher = alhambra_01 }
			desc = activity_feast_province_desc_alhambra
		}
		# ++ / double plus good
		triggered_desc = {
			trigger = { has_building_or_higher = farm_estates_01 }
			desc = activity_feast_province_desc_farm_estates
		}
		# + / plus good
		triggered_desc = {
			trigger = { has_building_or_higher = longhouses_01 }
			desc = activity_feast_province_desc_longhouses
		}
		triggered_desc = {
			trigger = { has_building_or_higher = orchards_01 }
			desc = activity_feast_province_desc_orchards
		}
		triggered_desc = {
			trigger = { has_building_or_higher = cereal_fields_01 }
			desc = activity_feast_province_desc_cereal_fields
		}
		triggered_desc = {
			trigger = { has_building_or_higher = plantations_01 }
			desc = activity_feast_province_desc_plantations
		}
	}

	max_province_icons = 5

	province_score = {
		value = 0
		add = 888
	}

	cooldown = { years = standard_feast_cooldown_time }

	ai_check_interval = 1
	
	# desc is only shown in debug AI watch window
	ai_will_do = {
		add = {
			value = -100
			desc = "Base"
		}
		if = {
			limit = {
				has_character_flag = hold_feast_now
			}
			add = {
				add = 10000
				desc = "must hold feast"
			}
		}
	}

	###################
	# GUEST HANDLING
	###################

	max_guests = 40

	guest_invite_rules = {
		rules = {
			# Relations.
			2 = activity_invite_rule_lovers
			2 = activity_invite_rule_rivals_if_appropriate

			# Family.
			3 = activity_invite_rule_extended_family

			# Magnates.
			4 = activity_invite_neighbouring_rulers

			# Misc landless.
			5 = activity_invite_rule_knights

			# MP 
			6 = activity_invite_mp
		}
		defaults = {
			1 = activity_invite_entrancer
			1 = activity_invite_victim
			1 = activity_invite_rule_friends
			1 = activity_invite_rule_close_family
			1 = activity_invite_rule_liege
			1 = activity_invite_rule_vassals
			2 = activity_invite_rule_fellow_vassals
			3 = activity_invite_rule_courtiers
			4 = activity_invite_rule_guests
			1 = activity_invite_spouses
		}
	}

	can_be_activity_guest = {
		is_adult = yes
		# is_healthy = yes
		in_diplomatic_range = scope:host
	}

	host_intents = {
		intents = { reduce_stress_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
	}

	guest_intents = {
		intents = { reduce_stress_intent woo_attendee_intent befriend_attendee_intent banquet_mischief_intent }
		default = reduce_stress_intent
	}

	guest_join_chance = {
		base = 10
		# base_activity_modifier = yes

		modifier = {
			has_variable = entrancer
			add = 999
			desc = is_target_of_entrancement
		}

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes 
		activity_guest_feast_ai_accept_modifier = yes
		
		# If the Host has hosted a Murder Feast recently people are sus
		modifier = {
			scope:host = { has_variable = recent_murder_feast_var }
			add = {
				value = -15
				desc = "Recent $feast_type_murder$"
			}
		}
		
		# Master of Revels Accolade increasing invite acceptance
		modifier = {
   		   scope:host = {
   		   		any_active_accolade = {
					has_accolade_parameter = acclaimed_knight_feast_wedding_invite_acceptance_bonus
				}
   		   }
   		   add = accolade_feast_wedding_invite_acceptance_value
   		}
	}

	special_guests = {
		entrancer_or_victim = {
			is_required = yes

			is_shown = { 
				# scope:special_option = flag:feast_type_generic
			}

			# scope:host = {
			# 	var:entrancer = {
			# 		save_scope_as = entrance_schemer
			# 	}
			# }
	
			select_character = {
				var:entrancer ?= {
					save_scope_as = character
				}
				var:victim ?= {
					save_scope_as = character
				}
			}

			can_pick = {
				NOT = { this = scope:host }
				# scope:host = {
				# 	var:entrancer = this
				# }
			}

			on_invite = {
				if = {
					limit = {
						is_ai = no
					}
					trigger_event = entrance.1021
				}
				else = {
					trigger_event = entrance.1141
				}	
			}
			
			ai_will_do = {
				value = 1000
			}
		}
	}

	travel_entourage_selection = {
		weight = {
			value = standard_travel_entourage_additions
			if = {
				limit = {
					OR = {
						has_trait = gregarious
						has_trait = drunkard
						has_trait = hashishiyah
						has_trait = gluttonous
						has_trait = comfort_eater
					}
				}
				add = 10
			}
		}
		max = 18
		invite_rule_order = 3
	}

	cost = {
		gold = {
			add = {
				if = {
					limit = {
						is_ai = no
					}
				}
				add = {
					add = {
						value = feast_activity_cost
						desc = feast_activity_cost_desc
					}
					add = {
						value = feast_activity_cost
						multiply = activity_cost_scale_by_era
						subtract = feast_activity_cost
						desc = activity_cost_scale_by_era_desc
					}
					if = {
						limit = {
							scope:province ?= { has_building_or_higher = citadel_of_aleppo_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_max_value
							desc = feast_cost_discount_citadel_of_aleppo
						}
					}
					if = {
						limit = {
							scope:province ?= { has_building_or_higher = palace_of_aachen_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_max_value
							desc = feast_cost_discount_palace_of_aachen
						}
					}
					if = {
						limit = {
							scope:province ?= { has_building_or_higher = doges_palace_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_max_value
							desc = feast_cost_discount_doges_palace
						}
					}
					if = {
						limit = {
							scope:province ?= { has_building_or_higher = leisure_palace_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_max_value
							desc = feast_cost_discount_leisure_palaces
						}
					}
					if = {
						limit = {
							scope:province ?= { has_building_or_higher = alhambra_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_max_value
							desc = feast_cost_discount_alhambra
						}
					}
					if = {
						limit = { 
							scope:province ?= {
								has_building_or_higher = farm_estates_01
							}
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_medium_value
							desc = feast_cost_discount_farm_estates
						}
					}
					if = {
						limit = {
							scope:province ?= {	has_building_or_higher = longhouses_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_medium_value
							desc = feast_cost_discount_longhouses
						}
					}
					if = {
						limit = {
							scope:province ?= {	has_building_or_higher = orchards_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_min_value
							desc = feast_cost_discount_orchards
						}
					}
					if = {
						limit = {
							scope:province ?= {	has_building_or_higher = cereal_fields_01 }
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_min_value
							desc = feast_cost_discount_cereal_fields
						}
					}
					if = {
						limit = {
							scope:province ?= {	has_building_or_higher = plantations_01	}
						}
						add = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = feast_activity_cost_discount_min_value
							desc = activity_feast_province_desc_plantations
						}
					}
					if = {
						limit = {
							dynasty ?= {
								has_dynasty_perk = law_legacy_1
							}
						}
						subtract = {
							value = 0
							add = {
								value = feast_activity_cost
								add = {
									value = feast_activity_cost
									multiply = activity_cost_scale_by_era
									subtract = feast_activity_cost
								}
							}
							multiply = law_legacy_cost_reduction_mult
							desc = law_legacy_1_name
						}
					}
					min = 0
				}
			}
		}

		# gold = {
		# 	add = {
		# 		add = {
		# 			value = feast_activity_cost
		# 			desc = feast_activity_cost_desc
		# 		}
		# 		add = {
		# 			value = feast_activity_cost
		# 			multiply = activity_cost_scale_by_era
		# 			subtract = feast_activity_cost
		# 			desc = activity_cost_scale_by_era_desc
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= { has_building_or_higher = citadel_of_aleppo_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_max_value
		# 				desc = feast_cost_discount_citadel_of_aleppo
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= { has_building_or_higher = palace_of_aachen_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_max_value
		# 				desc = feast_cost_discount_palace_of_aachen
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= { has_building_or_higher = doges_palace_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_max_value
		# 				desc = feast_cost_discount_doges_palace
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= { has_building_or_higher = leisure_palace_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_max_value
		# 				desc = feast_cost_discount_leisure_palaces
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= { has_building_or_higher = alhambra_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_max_value
		# 				desc = feast_cost_discount_alhambra
		# 			}
		# 		}
		# 		if = {
		# 			limit = { 
		# 				scope:province ?= {
		# 					has_building_or_higher = farm_estates_01
		# 				}
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_medium_value
		# 				desc = feast_cost_discount_farm_estates
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= {	has_building_or_higher = longhouses_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_medium_value
		# 				desc = feast_cost_discount_longhouses
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= {	has_building_or_higher = orchards_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_min_value
		# 				desc = feast_cost_discount_orchards
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= {	has_building_or_higher = cereal_fields_01 }
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_min_value
		# 				desc = feast_cost_discount_cereal_fields
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				scope:province ?= {	has_building_or_higher = plantations_01	}
		# 			}
		# 			add = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = feast_activity_cost_discount_min_value
		# 				desc = activity_feast_province_desc_plantations
		# 			}
		# 		}
		# 		if = {
		# 			limit = {
		# 				dynasty ?= {
		# 					has_dynasty_perk = law_legacy_1
		# 				}
		# 			}
		# 			subtract = {
		# 				value = 0
		# 				add = {
		# 					value = feast_activity_cost
		# 					add = {
		# 						value = feast_activity_cost
		# 						multiply = activity_cost_scale_by_era
		# 						subtract = feast_activity_cost
		# 					}
		# 				}
		# 				multiply = law_legacy_cost_reduction_mult
		# 				desc = law_legacy_1_name
		# 			}
		# 		}
		# 		min = 0
		# 	}
		# }
	}

	ui_predicted_cost = {
		gold = {
			add = {
				if = {
					limit = {
						is_ai = no
					}
				}

				add = { # Base Cost, scaled by era
					value = feast_activity_cost
					multiply = activity_cost_scale_by_era
				}
			
				# Options 
				add = { # Food 
					value = 0 # Bad Option Cost
					add = 10 # Normal Option Cost
					add = 35 # Good Option Cost
					# Scale the sum of the options by era and tier
					add = {
						value = 45
						multiply = activity_cost_scale_by_tier
					}
					add = {
						value = 45
						multiply = activity_cost_scale_by_era
					}
					# Divide by 3 (num of levels for this option) so we get the average option cost
					divide = 3
				}
				add = { # Courses 
					value = 0 # Bad Option Cost
					add = 10 # Normal Option Cost
					add = 35 # Good Option Cost
					# Scale the sum of the options by era and tier
					add = {
						value = 45
						multiply = activity_cost_scale_by_tier
					}
					add = {
						value = 45
						multiply = activity_cost_scale_by_era
					}
					# Divide by 3 (num of levels for this option) so we get the average option cost
					divide = 3
				}
				save_temporary_value_as = pre_discount_feast_cost_ui
				if = {
					limit = {
						dynasty ?= {
							has_dynasty_perk = law_legacy_1
						}
					}
					subtract = {
						value = scope:pre_discount_feast_cost_ui
						multiply = law_legacy_cost_reduction_mult
					}
				}
				
				# Make it a multiple of 5 (rounded up)
				divide = 5
				ceiling = yes 
				multiply = 5
			}
		}
		# All costs are balanced on County/Early Era starting point
		# gold = {
		# 	add = { # Base Cost, scaled by era
		# 		value = feast_activity_cost
		# 		multiply = activity_cost_scale_by_era
		# 	}
			
		# 	# Options 
		# 	add = { # Food 
		# 		value = 0 # Bad Option Cost
		# 		add = 10 # Normal Option Cost
		# 		add = 35 # Good Option Cost
		# 		# Scale the sum of the options by era and tier
		# 		add = {
		# 			value = 45
		# 			multiply = activity_cost_scale_by_tier
		# 		}
		# 		add = {
		# 			value = 45
		# 			multiply = activity_cost_scale_by_era
		# 		}
		# 		# Divide by 3 (num of levels for this option) so we get the average option cost
		# 		divide = 3
		# 	}
		# 	add = { # Courses 
		# 		value = 0 # Bad Option Cost
		# 		add = 10 # Normal Option Cost
		# 		add = 35 # Good Option Cost
		# 		# Scale the sum of the options by era and tier
		# 		add = {
		# 			value = 45
		# 			multiply = activity_cost_scale_by_tier
		# 		}
		# 		add = {
		# 			value = 45
		# 			multiply = activity_cost_scale_by_era
		# 		}
		# 		# Divide by 3 (num of levels for this option) so we get the average option cost
		# 		divide = 3
		# 	}
		# 	save_temporary_value_as = pre_discount_feast_cost_ui
		# 	if = {
		# 		limit = {
		# 			dynasty ?= {
		# 				has_dynasty_perk = law_legacy_1
		# 			}
		# 		}
		# 		subtract = {
		# 			value = scope:pre_discount_feast_cost_ui
		# 			multiply = law_legacy_cost_reduction_mult
		# 		}
		# 	}
			
		# 	# Make it a multiple of 5 (rounded up)
		# 	divide = 5
		# 	ceiling = yes 
		# 	multiply = 5
		# }
	}

	###################
	# GRAPHICS
	###################

	map_entity = {
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_feast_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_feast_01_entity"
	}
	
	map_entity = "building_western_feast_01_entity"

	# Travel
	background = { # Bridge
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				is_riverside_province = yes
				geographical_region = world_europe
				OR = {
					terrain = farmlands
					terrain = plains
					terrain = mountains
					terrain = hills
				}
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_bridge.dds"
		environment = "environment_travel_bridge"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	
	background = { # Farmland, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				terrain = farmlands
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_farm.dds"
		environment = "environment_travel_farmlands"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { # Farmland, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				terrain = farmlands
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/farms.dds"
		environment = "environment_event_farms"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #Desert, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_desert.dds"
		environment = "environment_travel_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}
	background = { #Desert, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_desert_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/desert.dds"
		environment = "environment_event_bp1_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #forest snowy
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location ?= { hunt_snowy_forest_trigger = yes }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_hunt_snowy_forest.dds"
		environment = "environment_hunt_snowy_forest"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #forest_pine
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_forest_pine_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
		environment = "environment_event_forest_pine"
		ambience = "event:/SFX/Events/Backgrounds/coniferous_forest_day"
	}

	background = { #forest
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_forest_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/forest.dds"
		environment = "environment_event_forest"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #mountains, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_mountains.dds"
		environment = "environment_travel_mountain_settlement"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}
	background = { #mountains, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_mountains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/mountains.dds"
		environment = "environment_event_mountains"
		ambience = "event:/SFX/Events/Backgrounds/mountains_day"
	}

	background = { #steppe, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_steppe.dds"
		environment = "environment_travel_steppe_settlement"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}
	background = { #steppe, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_steppe_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/steppe.dds"
		environment = "environment_event_steppe"
		ambience = "event:/SFX/Events/Backgrounds/steppe_day"
	}

	background = { #drylands (formerly desert)
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_drylands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/drylands.dds"
		environment = "environment_event_desert"
		ambience = "event:/SFX/Events/Backgrounds/desert_day"
	}

	background = { #wetlands
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_wetlands_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_wetlands.dds"
		environment = "environment_event_bp1_wetlands" 
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #jungle
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_wilderness_jungle_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_jungle.dds"
		environment = "environment_event_bp1_jungle"
		ambience = "event:/SFX/Events/Backgrounds/deciduous_forest_day"
	}

	background = { #plains, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_plains_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #plains, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_plains_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_plains.dds"
		environment = "environment_event_bp1_plains"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #hills, settled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_hills_trigger = yes
				exists = province_owner
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_travel_hills.dds"
		environment = "environment_travel_hills_settlement"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}
	background = { #hills, unsettled
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				graphical_hills_trigger = yes
				NOT = { exists = province_owner }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/bp1_hills.dds"
		environment = "environment_event_bp1_hills"
		ambience = "event:/SFX/Events/Backgrounds/fields_farms_day"
	}

	background = { #sea
		trigger = {
			OR = {
				NOT = {
					scope:host.location = scope:activity.activity_location
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest.location
					NOT = {
						scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
					}
				}
				AND = {
					exists = scope:activity.special_guest:honorary_guest_regular.location
					NOT = {
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
				}
			}
			scope:host.location = {
				is_sea_province = yes
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_ocean.dds"
		environment = "environment_event_fp1_ocean"
		ambience = "event:/DLC/FP1/SFX/Events/event_ocean_longship"
	}
	# End Travel

	background = {	# FP1
		trigger = {
			activity_location.culture = { has_building_gfx = norse_building_gfx }
		}
		texture = "gfx/interface/illustrations/event_scenes/fp1_viking_feast.dds"
		environment = "environment_event_fp1_viking_feast"
		ambience = "event:/DLC/FP1/SFX/Events/event_viking_feast"
	}
	background = {
		trigger = {
			activity_location.culture = { has_building_gfx = indian_building_gfx }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_feast_indian.dds"
		environment = "environment_indian_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
	}
	background = {
		trigger = {
			OR = {
				activity_location.culture = { has_building_gfx = arabic_group_building_gfx }
				activity_location.culture = { has_building_gfx = berber_group_building_gfx }
				activity_location.culture = { has_building_gfx = iberian_building_gfx }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_feast_mena.dds"
		environment = "environment_mena_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
	}
	background = {
		trigger = {
			activity_location.culture = { has_building_gfx = steppe_building_gfx }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_feast_steppe.dds"
		environment = "environment_steppe_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
	}
	background = {
		trigger = {
			activity_location.culture = { has_building_gfx = african_building_gfx }
		}
		texture = "gfx/interface/illustrations/event_scenes/ep2_feast_sub_saharan.dds"
		environment = "environment_sub-saharan_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
	}
	background = {
		trigger = {
			OR = {
				scope:activity = {
					has_activity_option = {
						category = special_type
						option = feast_type_generic
					}
				}
				scope:activity.special_guest:honorary_guest ?= { is_alive = yes }
			}
		}
		texture = "gfx/interface/illustrations/event_scenes/feast.dds"
		environment = "environment_event_feast"
		ambience = "event:/SFX/Events/Backgrounds/feasthall"
		music = "grandfeast_cue"
	}

	window_characters = {
		
		guest = {
			camera = camera_body_right

			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						exists = scope:player
						scope:player = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
						}
					}
					scope:player ?= { add_to_list = characters }
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						exists = scope:host.intent_target
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							this = scope:host.intent_target
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							this = scope:host.intent_target
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								has_relation_lover = scope:host
								has_relation_friend = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_consort_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_consort_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
						}
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							has_activity_intent = woo_attendee_intent
						}
						scope:character = scope:host.intent_target
					}
					animation = { love flirtation }
				}
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = shy }
					}
					animation = { sadness worry }
				}
				#Fallback
				animation = toast
			}
		}
		
		host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						OR = {
							AND = {
								exists = scope:activity.special_guest:honorary_guest.location
								NOT = {
									scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
								}
							}
							AND = {
								exists = scope:activity.special_guest:honorary_guest_regular.location
								NOT = {
									scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
								}
							}
						}
					}
					animation = { boredom }
				}
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							is_male = yes
							has_activity_intent = befriend_attendee_intent
						}
						scope:host.intent_target.location = scope:activity.activity_location
					}
					animation = { personality_forgiving personality_compassionate }
				}
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							is_male = yes
							has_activity_intent = woo_attendee_intent
						}
						scope:host.intent_target.location = scope:activity.activity_location
					}
					animation = { wedding_groom_right }
				}
				triggered_animation = {
					trigger = {
						exists = scope:host.intent_target
						scope:host = {
							is_female = yes
							has_activity_intent = woo_attendee_intent
						}
						scope:host.intent_target.location = scope:activity.activity_location
					}
					animation = { reception_bride_right }
				}
				triggered_animation = {
					trigger = {
						always = yes
					}
					animation = { toast_goblet }
				}
			}
		}
		
		travel_host = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						NOT = {
							scope:host.location = scope:activity.activity_location
						}
					}
					scope:host = {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character.location = { is_sea_province = yes }
					}
					animation = { idle }
				}
				triggered_animation = {
					trigger = { scope:character = { has_trait = impatient } }
					animation = { jockey_gallop }
				}
				animation = jockey_walk
			}
		}

		honorary_guest_regular_traveling = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:activity.special_guest:honorary_guest_regular.involved_activity ?= scope:activity
						NOT = {
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
					}
					special_guest:honorary_guest_regular ?= {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character.location = { is_sea_province = yes }
					}
					animation = { idle }
				}
				triggered_animation = {
					trigger = { scope:character = { has_trait = impatient } }
					animation = { jockey_gallop }
				}
				animation = jockey_walk
			}
		}

		honorary_guest_regular = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
					}
					special_guest:honorary_guest_regular ?= {
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						always = yes
					}
					animation = { ecstasy wedding_priest chaplain personality_honorable personality_bold }
				}
			}
		}
		
		guest = {
			camera = camera_body
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 2
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 2
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 2
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 2
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
						}
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = shy }
					}
					animation = { stress }
				}

				#Fallback
				animation = toast 
			}
		}
		
		guest = {
			camera = camera_body_left
			
			effect = {
				if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 3
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							is_councillor_of = scope:host
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 3
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_duchy
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 3
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							highest_held_title_tier >= tier_county
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
						any_attending_character = {
							count >= 3
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
							OR = {
								is_parent_of = scope:host
								is_close_or_extended_family_of = scope:host
							}
						}
						add_to_list = characters
					}
				}
				else_if = {
					limit = {
						scope:host.location = scope:activity.activity_location
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest }
							scope:activity.special_guest:honorary_guest.location ?= scope:activity.activity_location
						}
						OR = {
							NOT = { exists = scope:activity.special_guest:honorary_guest_regular }
							scope:activity.special_guest:honorary_guest_regular.location ?= scope:activity.activity_location
						}
					}
					every_attending_character = {
						limit = {
							location = scope:activity.activity_location
							NOR = {
								this = scope:host
								scope:activity.special_guest:honorary_guest ?= this
								scope:activity.special_guest:honorary_guest_regular ?= this
							}
						}
						add_to_list = characters
					}
				}
			}

			scripted_animation = {
				triggered_animation = {
					trigger = {
						scope:character = { has_trait = shy }
					}
					animation = { paranoia }
				}
				# triggered_animation = {
				# 	trigger = {
				# 	}
				# 	animation = { drink eavesdrop wedding_drunk }
				# }
				#Fallback
				animation = toast
			}
		}
	}

	###################
	# OPTIONS
	###################

	options = {
		#Feast types
		special_type = {
			# Revel feast.
			## Generic feast for when you've got no specific reason.
			feast_type_generic = {
				default = yes

				ai_will_do = {
					value = 1000
				}
			}

		}

		# How fancy do you make your dishes?
		feast_option_food = {
			feast_food_bad = {
				is_shown = { has_dlc_feature = advanced_activities }
				
				cost = {

				}

				ai_will_do = {
					value = 100
					# # Financial preference.
					# add = activity_option_likes_cheap_expense_value
					# # Fanciness preference.
					# add = activity_option_likes_functional_food_option_value
				}
			}
			feast_food_normal = {
				default = yes
				cost = {
					# gold = {
					# 	add = {
					# 		add = {
					# 			value = 10
					# 			desc = feast_food_normal
					# 		}
					# 		add = {
					# 			value = 10
					# 			multiply = activity_cost_scale_by_tier
					# 			subtract = 10
					# 			desc = activity_cost_scale_by_tier_desc
					# 		}
					# 		add = {
					# 			value = 10
					# 			multiply = activity_cost_scale_by_era
					# 			subtract = 10
					# 			desc = activity_cost_scale_by_era_desc
					# 		}
					# 		if = {
					# 			limit = {
					# 				dynasty ?= {
					# 					has_dynasty_perk = law_legacy_1
					# 				}
					# 			}
					# 			subtract = {
					# 				value = 10
					# 				add = {
					# 					value = 10
					# 					multiply = activity_cost_scale_by_tier
					# 					subtract = 10
					# 				}
					# 				add = {
					# 					value = 10
					# 					multiply = activity_cost_scale_by_era
					# 					subtract = 10
					# 				}
					# 				multiply = law_legacy_cost_reduction_mult
					# 				desc = law_legacy_1_name
					# 			}
					# 		}
					# 		min = 0
					# 	}
					# }
				}

				ai_will_do = {
					value = 968
					# # Financial preference.
					# add = activity_option_likes_middling_expense_value
					# # Fanciness preference.
					# ## We just use slightly reduced fanciness prefs here.
					# add = {
					# 	value = activity_option_likes_ostentatious_food_option_value
					# 	multiply = 0.5
					# }
				}
			}
			feast_food_good = {
				is_shown = { has_dlc_feature = advanced_activities }

				# cost = {
				# 	gold = {
				# 		add = {
				# 			add = {
				# 				value = 35
				# 				desc = feast_food_good
				# 			}
				# 			add = {
				# 				value = 35
				# 				multiply = activity_cost_scale_by_tier
				# 				subtract = 35
				# 				desc = activity_cost_scale_by_tier_desc
				# 			}
				# 			add = {
				# 				value = 35
				# 				multiply = activity_cost_scale_by_era
				# 				subtract = 35
				# 				desc = activity_cost_scale_by_era_desc
				# 			}
				# 			if = {
				# 				limit = {
				# 					dynasty ?= {
				# 						has_dynasty_perk = law_legacy_1
				# 					}
				# 				}
				# 				subtract = {
				# 					value = 35
				# 					add = {
				# 						value = 35
				# 						multiply = activity_cost_scale_by_tier
				# 						subtract = 35
				# 					}
				# 					add = {
				# 						value = 35
				# 						multiply = activity_cost_scale_by_era
				# 						subtract = 35
				# 					}
				# 					multiply = law_legacy_cost_reduction_mult
				# 					desc = law_legacy_1_name
				# 				}
				# 			}
				# 			min = 0
				# 		}
				# 	}
				# }

				ai_will_do = {
					value = 100
					# # Financial preference.
					# add = activity_option_likes_heavy_expense_value
					# # Fanciness preference.
					# add = activity_option_likes_ostentatious_food_option_value
				}
			}
		}

		# How many courses do you have?
		feast_option_courses = {
			feast_courses_bad = {
				is_shown = { has_dlc_feature = advanced_activities }

				cost = {

				}

				ai_will_do = {
					value = 100
					# # Financial preference.
					# add = activity_option_likes_cheap_expense_value
					# # Quantity preference.
					# add = activity_option_food_prefers_small_volume_value
				}
			}
			feast_courses_normal = {
				default = yes
	
				cost = {
					# gold = {
					# 	# add = {
					# 	# 	add = {
					# 	# 		value = 10
					# 	# 		desc = feast_courses_normal
					# 	# 	}
					# 	# 	add = {
					# 	# 		value = 10
					# 	# 		multiply = activity_cost_scale_by_tier
					# 	# 		subtract = 10
					# 	# 		desc = activity_cost_scale_by_tier_desc
					# 	# 	}
					# 	# 	add = {
					# 	# 		value = 10
					# 	# 		multiply = activity_cost_scale_by_era
					# 	# 		subtract = 10
					# 	# 		desc = activity_cost_scale_by_era_desc
					# 	# 	}
					# 	# 	if = {
					# 	# 		limit = {
					# 	# 			dynasty ?= {
					# 	# 				has_dynasty_perk = law_legacy_1
					# 	# 			}
					# 	# 		}
					# 	# 		subtract = {
					# 	# 			value = 10
					# 	# 			add = {
					# 	# 				value = 10
					# 	# 				multiply = activity_cost_scale_by_tier
					# 	# 				subtract = 10
					# 	# 			}
					# 	# 			add = {
					# 	# 				value = 10
					# 	# 				multiply = activity_cost_scale_by_era
					# 	# 				subtract = 10
					# 	# 			}
					# 	# 			multiply = law_legacy_cost_reduction_mult
					# 	# 			desc = law_legacy_1_name
					# 	# 		}
					# 	# 	}
					# 	# 	min = 0
					# 	# }
					# }
				}

				ai_will_do = {
					value = 969
					# # Financial preference.
					# add = activity_option_likes_middling_expense_value
					# # Quantity preference.
					# ## We just use slightly reduced quantity prefs here.
					# add = {
					# 	value = activity_option_prefers_large_volume_value
					# 	multiply = 0.5
					# }
				}
			}
			feast_courses_good = {
				is_shown = { has_dlc_feature = advanced_activities }

				cost = {
					# gold = {
					# 	add = {
					# 		add = {
					# 			value = 35
					# 			desc = feast_courses_good
					# 		}
					# 		add = {
					# 			value = 35
					# 			multiply = activity_cost_scale_by_tier
					# 			subtract = 35
					# 			desc = activity_cost_scale_by_tier_desc
					# 		}
					# 		add = {
					# 			value = 35
					# 			multiply = activity_cost_scale_by_era
					# 			subtract = 35
					# 			desc = activity_cost_scale_by_era_desc
					# 		}
					# 		if = {
					# 			limit = {
					# 				dynasty ?= {
					# 					has_dynasty_perk = law_legacy_1
					# 				}
					# 			}
					# 			subtract = {
					# 				value = 35
					# 				add = {
					# 					value = 35
					# 					multiply = activity_cost_scale_by_tier
					# 					subtract = 35
					# 				}
					# 				add = {
					# 					value = 35
					# 					multiply = activity_cost_scale_by_era
					# 					subtract = 35
					# 				}
					# 				multiply = law_legacy_cost_reduction_mult
					# 				desc = law_legacy_1_name
					# 			}
					# 		}
					# 		min = 0
					# 	}
					# }
				}

				ai_will_do = {
					value = 100
					# # Financial preference.
					# add = activity_option_likes_heavy_expense_value
					# # Quantity preference.
					# add = activity_option_prefers_large_volume_value
				}
			}
		}
	}

	# special_option_category = special_type

	###################
	# PHASES
	###################

	max_guest_arrival_delay_time = { months = 8 }

	phases = {
		# Meal.
		feast_phase_meal = {		
			order = 1
			is_predefined = yes

			is_shown = { always = yes }
			is_valid = {

			}

			on_phase_active = {
				# Sort some stuff on the host.
				if = {
					limit = { this = scope:host }

					scope:activity = { progress_activity_phase_after = { weeks = 2 } }

					# Misc. old content variable.
					## Reduce alcohol stores if appropriate.					
					if = {
						limit = { exists = var:protected_alcohol_stores }
						set_variable = {
							name = protected_alcohol_stores
							value = 0
						}
					}
					## Look for a target you're trying to befriend
					if = {
						limit = {
							any_scheme = {
								scheme_type = befriend
								scheme_target = {
									exists = involved_activity
									involved_activity = scope:activity
								}
							}
						}
						random_scheme = {
							limit = {
								scheme_type = befriend
								scheme_target = {
									exists = involved_activity
									involved_activity = scope:activity
								}
							}
							scheme_target = {
								save_scope_as = potential_friend
								scope:activity = {
									set_variable = {
										name = potential_friend
										value = scope:potential_friend
									}
								}
							}
							scheme_freeze = { days = 10 }
						}
					}
					# And now, the main event!
					## Check that there are guests apart from the feast host.
					if = {
						limit = {
							scope:activity = {
								any_attending_character = {
									count = 0
									NOT = {	this = scope:host }
								}
							}
						}
						# If there are no other guests, throw this event.
						## [sad period-appropriate trombone noises]
						trigger_event = feast.2003
					}
					## Otherwise, there are guests present.
					### The key event is chosen for the host, and fires other events from there to every participant.
					else = {
						trigger_event = feast_replacement.2001
						# Struggle Catalysts
						## We trigger this here to make sure that someone else actually turned up to the party before having it affect regional relations.
						if = {
							limit = {
								# At least one participant is involved and  of a different faith or culture
								scope:activity = {
									any_attending_character = {
										any_character_struggle = {
											involvement = involved
											phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast
										}
										is_diff_faith_or_culture_trigger = {
											CHAR = scope:host
											STATUS = involved
										}
									}
								}
							}
							every_character_struggle = {
								involvement = involved
								activate_struggle_catalyst = {
									catalyst = catalyst_invite_diff_faith_culture_to_feast
									character = scope:activity.activity_host
								}
							}
						}
					}
					# Accolade stuff
					if = {
						limit = {
							any_active_accolade = {
								has_accolade_parameter = accolade_party_fertility
							}
						}
						add_character_modifier = {
							modifier = accolade_charmer_party_modifier
						}
					}
					if = {
						limit = {
							any_active_accolade = {
								has_accolade_parameter = accolade_party_fertility_high
							}
						}
						add_character_modifier = {
							modifier = accolade_charmer_party_high_modifier
						}
					}
				}
				# And for everyone else.
				else = {
					# You're busy at another party! (invites were sent the same day, but you agreed to another party after this one )
					if = {
						limit = {
							exists = var:booked_for_a_party
							var:booked_for_a_party = {
								NOT = { this = scope:activity.activity_host }
							}
						}
						trigger_event = feast.0010
					}
					else = {
						random_list = {
							0 = { #they don't join
								modifier = {
									add = 100
									scope:host = { has_variable = murder_feast_perpetrator_var } #if you have hosted a murder feast
								}
							}
							100 = {
								trigger_event = feast.7051
							}
						}
						# Take care of reveller stuff for everyone else.
						if = {
							limit = { 
								NOT = { has_trait = temperate }
							}
							# Reveler lifestyle tracking:
							reveler_points_gain_effect = {
								CHANGE = 1
								RANDOM_CHANGE = 1
							}
							# Remove blocker for invitations to feasts (the feast is now active and will work as a blocker)
							remove_variable = booked_for_a_party
						}
					}
				}
			}
			
			on_weekly_pulse = {
				if = { #host
					limit = {
						this = scope:host
					}
					trigger_event = { on_action = entrance_feast_new_event_selection_tombola }
				}
				else_if = { #guest
					limit = {
						NOT = { this = scope:host }
					}
					trigger_event = { on_action = entrance_feast_default_event_selection }
				}
			}
		}

		plant_seed_attempt_phase = {
			order = 2
			is_predefined = yes

			on_enter_phase = {
				debug_log = "ENTERED on_enter_phase plant_seed_attempt"
				if = {
					limit = { 
						this = scope:host
					}
					# debug_log = "ENTERED on_enter_phase plant_seed_attempt HOST CHECK"
					# # No passive state for the toast, just jump right into it
					scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
				else_if = {
					limit = {
						this = scope:activity.special_guest:entrancer_or_victim
					}
					# debug_log = "ENTERED on_enter_phase plant_seed_attempt Entrancer CHECK"

					# scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
			}

			on_phase_active = {
				debug_log = "ENTERED on_phase_active plant_seed_attempt"

				if = {
					limit = { # host has a recorded entrancer, so is the victim
						scope:host = {
							has_variable = entrancer
						}
					}
					scope:host = {
						save_scope_as = victim
					}
					scope:activity.special_guest:entrancer_or_victim = {
						save_scope_as = entrancer
					}
				}
				else = {
					scope:host = {
						save_scope_as = entrancer
					}
					scope:activity.special_guest:entrancer_or_victim = {
						save_scope_as = victim
					}
				}

				if = {
					limit = { 
						this = scope:host
					}
					scope:activity = { progress_activity_phase_after = { weeks = 1 } }

				}

				if = {
					limit = { 
						this = scope:host
						this = scope:entrancer
					}
					
					debug_log = "ENTERED on_phase_active plant_seed_attempt HOST is entrancer CHECK"

					scope:host = {
						trigger_event = entrance.1042
					}
				}
				else_if = {
					limit = {
						this = scope:activity.special_guest:entrancer_or_victim
						this = scope:entrancer
					}
					debug_log = "ENTERED on_phase_active plant_seed_attempt Special guest is Entrancer CHECK"

					scope:activity.special_guest:entrancer_or_victim = {
						trigger_event = entrance.1022
					}
				}
			}
		}

		feast_phase_meal_2 = {		
			order = 3
			is_predefined = yes

			is_shown = { always = yes }
			is_valid = {

			}

			on_enter_phase = {
				debug_log = "ENTERED on_enter_phase feast_phase_meal_2"
				if = {
					limit = { this = scope:host }
					debug_log = "ENTERED on_enter_phase feast_phase_meal_2 HOST CHECK"
					# # No passive state for the toast, just jump right into it
					# scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
				else_if = {
					limit = {
						this = scope:activity.special_guest:entrancer_or_victim
					}
					debug_log = "ENTERED on_enter_phase feast_phase_meal_2 Entrancer CHECK"

					scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
			}

			on_phase_active = {
				# # Sort some stuff on the host.
				if = {
					limit = { this = scope:host }

					scope:activity = { progress_activity_phase_after = { months = 1 } }
				}
			}
			
			on_weekly_pulse = {
				if = { #host
					limit = {
						this = scope:host
					}
					trigger_event = { on_action = entrance_feast_new_event_selection_tombola }
				}
				else_if = { #guest
					limit = {
						NOT = { this = scope:host }
					}
					trigger_event = { on_action = entrance_feast_default_event_selection }
				}
			}
		}

		complete_entrance_attempt_phase = {
			order = 4
			is_predefined = yes
			
			on_enter_phase = {
				if = {
					limit = { this = scope:host }
					debug_log = "ENTERED on_enter_phase complete_entrance_attempt_phase HOST CHECK"

					scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
				else_if = {
					limit = {
						this = scope:activity.special_guest:entrancer_or_victim
					}
					debug_log = "ENTERED on_enter_phase complete_entrance_attempt_phase Entrancer CHECK"
				}
			}

			on_phase_active = {
				if = {
					limit = { # host has a recorded entrancer, so is the victim
						scope:host = {
							has_variable = entrancer
						}
					}
					scope:host = {
						save_scope_as = victim
					}
					scope:activity.special_guest:entrancer_or_victim = {
						save_scope_as = entrancer
					}
				}
				else = {
					scope:host = {
						save_scope_as = entrancer
					}
					scope:activity.special_guest:entrancer_or_victim = {
						save_scope_as = victim
					}
				}


				if = {
					limit = { 
						this = scope:host
					}
					scope:activity = { progress_activity_phase_after = { days = 2 } }
				}


				if = {
					limit = { 
						this = scope:host
						this = scope:entrancer
					}
					debug_log = "ENTERED on_phase_active complete_entrance_attempt_phase HOST CHECK"

					trigger_event = entrance.1045
				}
				else_if = {
					limit = {
						this = scope:activity.special_guest:entrancer_or_victim
						this = scope:entrancer
					}
					debug_log = "ENTERED on_phase_active complete_entrance_attempt_phase Entrancer CHECK"
					trigger_event = entrance.1025

				}
			}
		}
	}

	ai_will_select_province = {
		# Base
		value = 469
	}

	###################
	# ACTIVITY-SPECIFIC PULSES
	###################
	
	pulse_actions = {
		entries = {
			spouse_skill_diplomacy_improves spouse_gives_host_prestige spouse_manages_feast_splendidly spouse_impresses_clergy spouse_gives_hook
			relation_gains_friend children_bonding hook_trusting_guest guest_tells_fantastic_joke
			excellent_food lauded_food guest_impressed_by_court_artifact friend_lauds_efforts courtly_vassals_appeased impressed_courtly_vassal
			impressed_guest_honor guest_of_honor_impressed guest_of_honor_praised
			guest_chokes_on_bone guest_brawl spouse_insults_host ridiculed_food
			host_gains_diplo_xp host_gains_steward_xp host_gains_intrigue_xp
			leftover_food_giveaway virtuous_feast noble_privileges good_kitty good_puppy antiquarian_admires_artifact jester_entertained_guests apa_executioner
		}
		chance_of_no_event = 5
	}
	
	on_start = {
		debug_log = "ENTRANCE FEAST IS STARTING"

		# scope:host = {
		# 	var:entrancer = {
		# 		save_scope_as = entrance_schemer
		# 	}
		# }

		# # invite_to_activity entrance.1021
		# if = {
		# 	limit = {
		# 		exists = scope:entrance_schemer
		# 	}

		# 	scope:entrance_schemer = {
		# 		set_variable = {
		# 			name = invited_entrance_feast
		# 			value = scope:activity
		# 		}
	
		# 		trigger_event = entrance.1021
		# 	}
		# }
		# else = {
		# 	debug_log = "no entrance schemer found"
		# }


		set_variable = {
			name = host_var
			value = scope:host
		}
		add_activity_log_entry = {
			key = feast_start_log
			character = scope:host
			score = 10
		}
		scope:host = {
			if = {
				limit = {
					ai_sociability > 0
					is_ai = yes
				}
				random = {
					chance = {
						value = 0.5 # One in 200 feasts
						if = {
							limit = {
								has_trait = gluttonous
							}
							add = 0.5
						}
						if = {
							limit = {
								has_trait = comfort_eater
							}
							add = 0.5
						}
						if = {
							limit = {
								ai_rationality <= -25
								has_personality_extroverted_trigger = yes
							}
							add = 0.5
						}
					}
					add_character_flag = feasts_a_lot
				}
			}
		}
		#fires hostage reunion event, if hostage giver is also present
		every_attending_character = {
			limit = {
				is_hostage_warden = yes
				has_bp2_dlc_trigger = yes
				NOT = { this = scope:host }
			}
			trigger_event = {
				id = bp2_yearly.6120
				days = 2
			}
		}
	}
	
	on_enter_passive_state = {
		trigger_event = feast.7002
	}

	# Effects run when the activity completes after its last phase
	# root = character in this phase
	# scope:activity = the activity
	# scope:host = host of the activity
	on_complete = {
		# Run conclusion stuff here
		if = {
			limit = { this = scope:host }
			location = { save_scope_as = activity_location }
			if = {
				limit = { this = scope:host }
				scope:host = {
					save_scope_as = root_scope
					trigger_event = feast.7101
					disburse_feast_activity_rewards = yes
				}
			}
			## A vassal was promised a feast (vassal.2101)
			if = {
				limit = {
					exists = var:was_promised_a_feast
					var:was_promised_a_feast = { is_alive = yes }
				}
				trigger_event = {
					id = vassal.2110
					days = { 7 14 }
				}
			}
			## Hold Court: A vassal sponsored a feast (vassal.2101)
			if = { 
				limit = {
					exists = var:hold_court_sponsored_a_feast
					has_royal_court = yes
				}
				trigger_event = {
					id = hold_court.3001
					days = { 15 20 }
				}
			}
			## Remove strife variable.
			if = {
				limit = { has_variable = strife_loss_total }
				remove_variable = strife_loss_total
			}
			# Accolade stuff
			if = {
				limit = {
					has_character_modifier = accolade_charmer_party_modifier
				}
				remove_character_modifier = accolade_charmer_party_modifier
			}
			if = {
				limit = {
					has_character_modifier = accolade_charmer_party_high_modifier
				}
				remove_character_modifier = accolade_charmer_party_high_modifier
			}
		}
		# Conclusion event for guests
		else = {
			if = {
				limit = {
					is_alive = yes
					NOT = { this = scope:host }
					is_imprisoned = no
				}
				disburse_feast_reveler_rewards = yes
				trigger_event = feast.7151
				
			}
		}

		# Struggle Catalysts
		fp3_struggle_catalysts_for_activities_effect = yes
	}
}
