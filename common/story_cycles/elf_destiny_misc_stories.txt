peddler_management_story = {
	# Effect is executed when story just has been created
	# root - active story cycle
	# scope:story - same as root
	on_setup = {
		story_owner = {
			trigger_event = {
				id = elf_dest_misc_repeating.100
				years = 2
			}
		}
	}

	# Effect is executed when story is ended by end_story effect
	# root - active story cycle
	# scope:story - same as root
	on_end = {}

	# Effect is executed when story owner dies. It's a good time to set new story owner
	# root - active story cycle
	# scope:story - same as root
	on_owner_death = {}

	# Any number of effect groups can be defined for story cycle type
	effect_group = {

		# Duration between attempts to execute this effect group . Can be fixed value or picked randomly from a range
		years = { 7 15 }

		# Chance that effect group will fire in the interval [0..100]
		# It chance doesn't proc, another attempt will be made again on next duration tick
		# If no chance is specified, effect group is always triggered
		# chance = <fixed_point>

		# Effect group will fire only if trigger is satisfied
		# root - active story cycle
		# scope:story - same as root
		trigger = {
			NOT = {
				has_character_modifier = peddlers_business_card_modifier
			}
		}

		# Execute effect only if trigger is valid
		# Only one independent triggered_effect can be defined
		# root - active story cycle
		# scope:story - same as root
		triggered_effect = {
			trigger = {
				always = yes
			}
			effect = {
				story_owner = {
					trigger_event = elf_dest_misc_repeating.100
				}
			}
		}

		# Execute at most one valid triggered effect picked at random
		# Any number of triggered_effect can be put inside random_valid block
		# root - active story cycle
		# scope:story - same as root
		# random_valid = {
		# 	triggered_effect = {}
		# 	...
		# 	triggered_effect = {}
		# }

		# Execute at most one first valid triggered effect
		# Any number of triggered_effect can be put inside first_valid block
		# root - active story cycle
		# scope:story - same as root
		# first_valid = {
		# 	triggered_effect = {}
		# 	...
		# 	triggered_effect = {}
		# }

		# Effect is only executed if none of the triggered effect were fired before
		# root - active story cycle
		# scope:story - same as root
		fallback = {
			story_owner = {
				trigger_event = elf_dest_misc_repeating.100
			}
		}
	}
	# effect_group = {}
}
