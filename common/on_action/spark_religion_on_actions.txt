# Code on-action: character creates a faith
# Root is the creator
# scope:old_faith is the faith they used to have
on_faith_created = {
    on_actions = {
        remove_free_reformation_modifier
		reset_high_matriarch
    } 
}

three_year_playable_pulse = {
	on_actions = {
		fix_religion_leases_backup
	}
}

remove_free_reformation_modifier = {
	effect = {
		if = {
			limit = {
				root = {
					has_character_modifier = deference_of_the_aelurans
				}
			}
			remove_character_modifier = deference_of_the_aelurans
		}

		if = {
			limit = {
				scope:old_faith = faith:aeluran_weavers
				is_ai = no
			}

			every_living_character = {
				limit = {
					is_aeluran_sister_or_higher = yes
				}

				if = {
					limit = {
						has_trait = aeluran_sister
					}
					random = {
						chance = 90
						set_character_faith = root.faith
					}
				}
				if = {
					limit = {
						has_trait = aeluran_matron
					}
					random = {
						chance = 75
						set_character_faith = root.faith
					}
				}
				else = { # Matriarch should always convert, her refusing would be a whole nother big thing
					set_character_faith = root.faith
				}
			}
		}
	}
}

reset_high_matriarch = {
	trigger = {
		root.faith = {
			has_doctrine = tenet_aeluran_sisters
		}
	}
	effect = {
		root.faith = {
			set_religious_head_title = title:d_high_matriarch
		}
	}
}

on_faith_conversion = {
	on_actions = {
		revert_elf_admin_conversion
		set_aeluran_realm_law
	}
}

revert_elf_admin_conversion = {
	trigger = {
		is_ai = yes
		is_any_elf_type = yes
		has_government = administrative_government
		scope:old_faith.religion = {
			is_in_family = rf_spark
		}
		NOT = {
			faith.religion = {
				is_in_family = rf_spark
			}
		}
	}

	effect = {
		debug_log = "revert_elf_admin_conversion"
		debug_log_scopes = yes
		debug_log_date = yes

		set_character_faith = scope:old_faith
	}
}

on_character_faith_change = {
	on_actions = {
		revert_elf_admin_faith_change
		set_aeluran_realm_law
	}
}

revert_elf_admin_faith_change = {
	trigger = {
		is_ai = yes
		is_any_elf_type = yes
		has_government = administrative_government
		scope:old_faith.religion = {
			is_in_family = rf_spark
		}
		NOT = {
			faith.religion = {
				is_in_family = rf_spark
			}
		}
	}

	effect = {
		debug_log = "revert_elf_admin_faith_change"
		debug_log_scopes = yes
		debug_log_date = yes
		
		set_character_faith = scope:old_faith
	}
}

set_aeluran_realm_law = {
	trigger = {
		faith = {
			has_doctrine = tenet_aeluran_sisters
		}
		has_realm_law = no_aeluran_law
	}
	effect = {
		debug_log = "set_aeluran_realm_law"
		add_realm_law = aeluran_realm_authority_1
	}
}

# used for when a player adds elf destiny into an already started game
fix_religion_leases_backup = {
	trigger = {
		NOT = {
			has_variable = religious_advisor
		}
		exists = cp:councillor_court_chaplain
		NOT = {
			exists = cp:councillor_aeluran_advisor
		}
	}
	effect = {
		set_variable = {
			name = religious_advisor
			value = cp:councillor_court_chaplain
		}
	}
}