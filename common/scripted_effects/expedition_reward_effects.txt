	# #Types      #Visuals
	# type = axe #axe
	# type = hammer #hammer
	# type = spear #spear
	# type = mace #mace
	# type = dagger #dagger
	# type = sword #sword longsword small_box
	# type = bow #bow
	# type = longbow #longbow
	# type = composite #composite
	# type = crossbow #crossbow
	# type = armor_plate #armor
	# type = armor_scale #armor
	# type = armor_lamellar #armor
	# type = armor_laminar #armor
	# type = armor_brigandine #armor
	# type = armor_mail #armor
	# type = armor_$TYPE$ #armor
	# type = regalia #regalia
	# type = regalia_simple #regalia small_box brooch (DEBUG: mace/sword/dagger/axe/hammer/spear)
	# type = helmet #crown pedestal_justinian hre_crown pope_tiara al_taj_crown
	# type = brooch #brooch
	# type = necklace #necklace
	# type = ring #ring

	# #flowers ring diamond pocket_pouch pocket_basic_case pocket_fancy_case pocket_figurine rock pocket_goblet regalia
	# #medallion necklace brooch human_skull indian_book book scroll bird_feather flask tapestry fabric_roll pelt
	# #falconry_glove skull_goblet medium_box small_box pouch chest cabinet_trinket tiny_throne_trinket
	# type = miscellaneous 

	# #fp2_chalice_dona_urraca fp2_santiago_aquamanile fp2_santiago_bells fp2_votive_crowns
	# #fp2_2p_chess_board fp2_4p_chess_board
	# type = miscellaneous_when_not_court
	# type = bowl #bowl
	# type = plate #plate
	# type = urn #urn
 
	# #bone rock pouch scroll cross human_skull diamond reliquary pedestal_longinus pedestal_christian_relic pedestal_islamic_relic
	# #pedestal_buddhism_relic buddha_tooth pedestal_branch_relic_zoroastr pedestal_branch_relic_germanic pedestal_branch_relic_slavic
	# #pedestal_branch_relic_boog pedestal_branch_relic_hinduism excalibur head riches medium_box regalia_court wall_khanda_sword 
	# #dagger_court spear_court sword_court small_box wall_cid_sword wall_muhammad_sword wall_sword_attila ring_court cup_jamshid_template
	# #crown_iron_template pedestal_justinian hre_crown olifant_court pedestal_david_harp pedestal_alexander_armor statuette
	# type = pedestal

	# type = brooch_pedestal #brooch_pedestal
	# type = necklace_pedestal #necklace_pedestal
	# type = chest #chest
	# type = cabinet #diwan table cabinet
	# type = throne #throne
	# type = throne_special #throne_charlemagne throne_solomon throne_scone throne_turquoise throne_peacock
	# type = tapestry #tapestry
	# type = animal_hide_big #large_animal_hide
	# type = animal_hide #small_animal_hide
	# type = animal_skull #animal_trophy
	# type = animal_trinket #fox_tail bear_paw tusk pouch animal_trinket
	# type = bird_feather #bird_feather
	# type = box #small_box medium_box
	# type = goblet #goblet riches
	# type = wall_big #banner banner_islam
	# type = wall_shield_special #wall_shield_medi
	# type = wall_shield # wall_shield
	# type = sculpture #statue_mena statue sculpture_cabinet_pentapyrgion sculpture_ark_of_covenant sculpture_babr_e_bayan
	# type = book #indian_book book
	# type = panacea #small_box
	# type = elixir #flask
	# type = philosophers_stone #small_box
	# type = tun_barrel #tun_barrel
	# type = scepter_pedestal #scepter_pedestal
	# type = pas_darmes_token #small_box
	# type = pas_darmes_spurs #small_box
	# type = tournament_favor #small_box
 
	# type = $TYPE$ #fp2_armillary_sphere fp2_andalusian_aquamanile $VISUALS$ $TYPE$

	#visuals_source = wall_big/banner wall_big/banner_islam wall_shield_special/wall_shield_medi wall_shield/wall_shield

	# Params: OWNER, RARITY, TYPE
	# IF Type = Equipment
	# IF Type = Jewelry
	# IF Type = Court

create_elf_expedition_artifact_effect = {
	$OWNER$ = { save_scope_as = owner }

	# Determine Quality/Wealth
	random_list = {
		10 = {
			save_scope_value_as = {
				name = quality
				value = 20
			}
			save_scope_value_as = {
				name = wealth
				value = 20
			}
		}
		7 = {
			save_scope_value_as = {
				name = quality
				value = 40
			}
			save_scope_value_as = {
				name = wealth
				value = 40
			}
		}
		5 = {
			save_scope_value_as = {
				name = quality
				value = 60
			}
			save_scope_value_as = {
				name = wealth
				value = 60
			}
		}
		3 = {
			save_scope_value_as = {
				name = quality
				value = 80
			}
			save_scope_value_as = {
				name = wealth
				value = 80
			}
		}
	}

	# Determine Archetype
	random_list = {
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:ravager
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:roadmen
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:paladin
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:captain
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:noble
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:aeluran
			}
		}
	}

	# Determine Artifact Type
	random_list = {
		10 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:axe
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:hammer
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:spear
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:mace
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:dagger
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:sword
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:bow
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:longbow
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:composite
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:crossbow
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_plate
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_scale
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_lamellar
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_laminar
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_brigandine
			}
		}
		3 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:armor_mail
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:regalia
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:regalia_simple
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:helmet
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:brooch
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:necklace
			}
		}
		0 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:ring
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_type
				value = flag:boots
			}
		}
	}

	if = {
		limit = {
			exists = scope:artifact_type
		}

		create_elf_artifact = yes
	}

}


create_specific_elf_expedition_artifact_effect = {
	$OWNER$ = { save_scope_as = owner }

	# Determine Quality/Wealth
	random_list = {
		10 = {
			save_scope_value_as = {
				name = quality
				value = 25
			}
			save_scope_value_as = {
				name = wealth
				value = 25
			}
		}
		7 = {
			save_scope_value_as = {
				name = quality
				value = 45
			}
			save_scope_value_as = {
				name = wealth
				value = 45
			}
		}
		5 = {
			save_scope_value_as = {
				name = quality
				value = 65
			}
			save_scope_value_as = {
				name = wealth
				value = 65
			}
		}
		3 = {
			save_scope_value_as = {
				name = quality
				value = 85
			}
			save_scope_value_as = {
				name = wealth
				value = 85
			}
		}
	}

	# Determine Archetype
	random_list = {
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:ravager
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:roadmen
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:paladin
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:captain
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:noble
			}
		}
		10 = {
			save_scope_value_as = {
				name = artifact_archetype
				value = flag:aeluran
			}
		}
	}


	if = {
		limit = {
			exists = scope:artifact_type
		}

		scope:owner = {
			create_elf_artifact = yes
		}
	}

}

create_elf_artifact = {

	hidden_effect_new_object = {
		if = { # Weapons
			limit = {
				exists = scope:artifact_type
				OR = {
					scope:artifact_type = flag:axe
					scope:artifact_type = flag:hammer
					scope:artifact_type = flag:spear
					scope:artifact_type = flag:mace
					scope:artifact_type = flag:dagger
					scope:artifact_type = flag:sword
					scope:artifact_type = flag:bow
					scope:artifact_type = flag:longbow
					scope:artifact_type = flag:composite
					scope:artifact_type = flag:crossbow
				}
			}
	
			if = { # Axe
				limit = {
					scope:artifact_type = flag:axe
				}
				create_artifact = {	
					name =  artifact_axe_name
					description = artifact_elf_axe_description
					# creator = scope:creator
					visuals = elf_axe
					type = axe
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Hammer
				limit = {
					scope:artifact_type = flag:hammer
				}
				create_artifact = {	
					name = artifact_elf_hammer_name
					description = artifact_elf_hammer_description
					# creator = scope:creator
					visuals = elf_hammer
					type = hammer
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}

			}
			else_if = { # Spear
				limit = {
					scope:artifact_type = flag:spear
				}
				create_artifact = {	
					name = artifact_elf_spear_name
					description = artifact_elf_spear_description
					# creator = scope:creator
					visuals = spear
					type = spear
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Mace
				limit = {
					scope:artifact_type = flag:mace
				}
				create_artifact = {	
					name = artifact_elf_mace_name
					description = artifact_elf_mace_description
					# creator = scope:creator
					visuals = mace
					type = mace
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Dagger
				limit = {
					scope:artifact_type = flag:dagger
				}
				create_artifact = {	
					name = artifact_elf_dagger_name
					description = artifact_elf_dagger_description
					# creator = scope:creator
					visuals = dagger
					type = dagger
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Sword
				limit = {
					scope:artifact_type = flag:sword
				}
				create_artifact = {	
					name = artifact_elf_sword_name
					description = artifact_elf_sword_description
					# creator = scope:creator
					visuals = elf_sword
					type = sword
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Bow
				limit = {
					scope:artifact_type = flag:bow
				}
				create_artifact = {	
					name = artifact_elf_bow_name
					description = artifact_elf_bow_description
					# creator = scope:creator
					visuals = bow
					type = bow
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Longbow
				limit = {
					scope:artifact_type = flag:longbow
				}
				create_artifact = {	
					name = artifact_elf_long_bow_name
					description = artifact_elf_long_bow_description
					# creator = scope:creator
					visuals = longbow
					type = longbow
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Composite
				limit = {
					scope:artifact_type = flag:composite
				}
				create_artifact = {	
					name = artifact_elf_composite_bow_name
					description = artifact_elf_composite_bow_description
					# creator = scope:creator
					visuals = composite
					type = composite
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Crossbow
				limit = {
					scope:artifact_type = flag:crossbow
				}
				create_artifact = {	
					name = artifact_elf_crossbow_bow_name
					description = artifact_elf_crossbow_bow_description
					# creator = scope:creator
					visuals = crossbow
					type = crossbow
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}

			scope:newly_created_elf_artifact = {
				# Rarity determines prowess bonus
				add_scaled_artifact_modifier_prowess_effect = yes
				add_elf_weapon_modifier = yes
				add_archetype_modifier = yes
				remove_artifact_modifier = elf_artifact_placeholder_modifier
				# get_archetype_descriptions_effect = yes
			}
		}

		if = { # Armor
			limit = {
				OR = {
					scope:artifact_type = flag:armor_plate
					scope:artifact_type = flag:armor_scale
					scope:artifact_type = flag:armor_lamellar
					scope:artifact_type = flag:armor_laminar
					scope:artifact_type = flag:armor_brigandine
					scope:artifact_type = flag:armor_mail
					scope:artifact_type = flag:helmet
				}
			}

			if = { # Armor Plate
				limit = {
					scope:artifact_type = flag:armor_plate
				}
				create_artifact = {	
					name = artifact_elf_armor_plate_name
					description = artifact_elf_armor_plate_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_plate
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Armor Scale
				limit = {
					scope:artifact_type = flag:armor_scale
				}
				create_artifact = {	
					name = artifact_elf_armor_scale_name
					description = artifact_elf_armor_scale_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_scale
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Armor Lamellar
				limit = {
					scope:artifact_type = flag:armor_lamellar
				}
				create_artifact = {	
					name = artifact_elf_armor_lamellar_name
					description = artifact_elf_armor_lamellar_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_lamellar
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Armor Laminar
				limit = {
					scope:artifact_type = flag:armor_laminar
				}
				create_artifact = {	
					name = artifact_elf_armor_laminar_name
					description = artifact_elf_armor_laminar_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_laminar
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Armor Brigandine
				limit = {
					scope:artifact_type = flag:armor_brigandine
				}
				create_artifact = {	
					name = artifact_elf_armor_brigandine_name
					description = artifact_elf_armor_brigandine_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_brigandine
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Armor Mail
				limit = {
					scope:artifact_type = flag:armor_mail
				}
				create_artifact = {	
					name = artifact_elf_armor_mail_name
					description = artifact_elf_armor_mail_description
					# creator = scope:creator
					visuals = elf_armor
					type = armor_mail
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Regalia
				limit = {
					scope:artifact_type = flag:regalia
				}
				create_artifact = {	
					name = artifact_elf_regalia_name
					description = artifact_elf_regalia_description
					# creator = scope:creator
					visuals = regalia
					type = regalia
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = { # Crown
				limit = {
					scope:artifact_type = flag:helmet
				}
				create_artifact = {	
					name = artifact_elf_crown_name
					description = artifact_elf_crown_description
					# creator = scope:creator
					visuals = crown
					type = helmet
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}

			scope:newly_created_elf_artifact = {
				# Rarity determines prowess bonus
				add_scaled_artifact_modifier_prowess_effect = yes
				add_elf_armor_modifier = yes
				add_archetype_modifier = yes
				remove_artifact_modifier = elf_artifact_placeholder_modifier
			}
		}

		if = { # Jewelry
			limit = {
				OR = {
					scope:artifact_type = flag:brooch
					scope:artifact_type = flag:necklace
					scope:artifact_type = flag:ring
				}
			}

			if = {
				limit = {
					scope:artifact_type = flag:brooch
				}
				create_artifact = {	
					name = artifact_elf_brooch_name
					description = artifact_elf_brooch_description
					# creator = scope:creator
					visuals = elf_brooch
					type = brooch
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}
			else_if = {
				limit = {
					scope:artifact_type = flag:necklace
				}
				create_artifact = {	
					name = artifact_elf_necklace_name
					description = artifact_elf_necklace_description
					# creator = scope:creator
					visuals = necklace
					type = necklace
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}		
			else_if = {
				limit = {
					scope:artifact_type = flag:ring
				}
				create_artifact = {	
					name = artifact_elf_ring_name
					description = artifact_elf_ring_description
					# creator = scope:creator
					visuals = ring
					type = ring
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}
			}

			scope:newly_created_elf_artifact = {
				# Rarity determines prowess bonus
				add_scaled_artifact_modifier_attractiveness_effect = yes
				remove_artifact_modifier = elf_artifact_placeholder_modifier
				# add_scaled_artifact_modifier_scholarship_effect = yes
				# add_scaled_artifact_modifier_learning_lifestyle_xp_effect = yes
				add_elf_jewelry_modifier = yes
				add_archetype_modifier = yes
			}
		}

		if = { # Misc
			limit = {
				# make an OR if adding more
				scope:artifact_type = flag:boots
			}

			if = { 
				limit = {
					scope:artifact_type = flag:boots
				}
				create_artifact = {	
					name = artifact_elf_boots_name
					description = artifact_elf_boots_description
					# creator = scope:creator
					visuals = elf_boots
					type = miscellaneous
					modifier = elf_artifact_placeholder_modifier
					wealth = scope:wealth
					quality = scope:quality
					save_scope_as = newly_created_elf_artifact
				}

				scope:newly_created_elf_artifact = {
					# Rarity determines prowess bonus
					remove_artifact_modifier = elf_artifact_placeholder_modifier
					add_elf_boots_modifier = yes
					add_archetype_modifier = yes
				}
			}
		}

		if = {
			limit = { exists = scope:newly_created_elf_artifact }
			scope:activity = {
				add_to_variable_list = {
					name = artifact_rewards
					target = scope:newly_created_elf_artifact
				}
			}
		}
	}

}


unique_find_fortress_tomb_of_the_emperor = {
	# $OWNER$ = { save_scope_as = owner }

	# IF first time to the tomb, they must get sigil of the realm lord

	# - Sigil of The Realm Lord
	# - Choose your Culture Decision
	# - \*Bloodstone Scepter
	# - map to other ruins
	if = {
		limit = {
			NOT = { has_global_variable = 01_sigil_of_the_realm_lord_found }
		}

		trigger_event = expedition.006901
	} 
	else = {
		random_list = {
			10 = { # Culture evolution discovery
				# trigger = {
				# 	NOT = { has_global_variable = 01_culture_discovery_found }
				# }
				trigger_event = expedition_unique_encounters.001
			}
			# 3 = { # Bloodstone Scepter
			# 	trigger = {
			# 		NOT = { has_global_variable = 01_bloodstone_sceptor_found }
			# 	}
			# 	trigger_event = expedition_unique_encounters.002
			# }
			# 10 = { # Map to other ruins
			# 	trigger = {
			# 		NOT = { has_global_variable = 01_other_ruins_location_found }
			# 	}
			# 	trigger_event = expedition_unique_encounters.003
			# }
		}
	}

	# Ends Activity
	# scope:activity = {
	# 	save_scope_value_as = {
	# 		name = status
	# 		value = flag:expedition_is_over
	# 	}
	# }
}

unique_find_portal_capacitor = {
	random_list = {
		10 = { # Culture evolution discovery
			# trigger = {
			# 	NOT = { has_global_variable = 02_culture_discovery_found }
			# }
			trigger_event = expedition_unique_encounters.001
		}
		20 = { # Portal Spark Capacitor
			trigger = {
				NOT = { has_global_variable = portal_capacitor_found }
			}
			trigger_event = expedition_unique_encounters.0021
		}
	}

}

unique_find_portal_navigation_relay = {
	random_list = {
		10 = { # Culture evolution discovery
			# trigger = {
			# 	NOT = { has_global_variable = 02_culture_discovery_found }
			# }
			trigger_event = expedition_unique_encounters.001
		}
		20 = { # Portal Navigation Relay
			trigger = {
				NOT = { has_global_variable = portal_navigation_relay_found }
			}
			trigger_event = expedition_unique_encounters.0022
		}
	}

}

unique_find_after_portal_restored = {
	random_list = {
		10 = { # Encounter Valar

			# DEV NOTE: This led to massive repeats when people dont want valar blessings
			# modifier = {
			# 	add = 60
			# 	scope:host.culture = {
			# 		NOT = {
			# 			OR = {
			# 				has_cultural_tradition = tradition_blessing_of_vana
			# 				has_cultural_tradition = tradition_blessing_of_tulkas_astaldo
			# 			}
			# 		}
			# 	}
			# }
			# debug_log = "Valar event"
			trigger_event = expedition_unique_encounters.003

		}
		90 = { # Culture evolution discovery
			debug_log = "Culture tradition event"

			trigger_event = expedition_unique_encounters.001
		}
	}
}

unique_find_default = {
	random_list = {
		10 = { # Culture evolution discovery
			# trigger = {
			# 	NOT = { has_global_variable = 02_culture_discovery_found }
			# }
			trigger_event = expedition_unique_encounters.001
		}
	}
}


unique_find_ruins_of_valfuria = {
	random_list = {
		10 = { # Culture evolution discovery
			# trigger = {
			# 	NOT = { has_global_variable = 02_culture_discovery_found }
			# }
			trigger_event = expedition_unique_encounters.001
		}
		10 = { # Portal Spark Capacitor
			trigger = {
				NOT = { has_global_variable = portal_capacitor_found }
			}
			trigger_event = expedition_unique_encounters.0021
		}
		# 3 = { # Some sword...
		# 	trigger = {
		# 		NOT = { has_global_variable = 01_bloodstone_sceptor_found }
		# 	}
		# 	trigger_event = expedition_unique_encounters.002
		# }
		# 10 = { # Map to other ruins
		# 	trigger = {
		# 		NOT = { has_global_variable = 01_other_ruins_location_found }
		# 	}
		# 	trigger_event = expedition_unique_encounters.003
		# }
	}

	# Ends Activity
	# scope:activity = {
	# 	set_variable = {
	# 		name = status
	# 		value = flag:expedition_is_over
	# 	}
	# }
}

unique_find_volcanic_forge = {
	random_list = {
		10 = { # Culture evolution discovery
			# trigger = {
			# 	NOT = { has_global_variable = 03_culture_discovery_found }
			# }
			trigger_event = expedition_unique_encounters.001
		}
		10 = { # Portal Navigation Relay
			trigger = {
				NOT = { has_global_variable = portal_navigation_relay_found }
			}
			trigger_event = expedition_unique_encounters.0022
		}
		# 3 = { # Some sword...
		# 	trigger = {
		# 		NOT = { has_global_variable = 01_bloodstone_sceptor_found }
		# 	}
		# 	trigger_event = expedition_unique_encounters.002
		# }
		# 10 = { # Map to other ruins
		# 	trigger = {
		# 		NOT = { has_global_variable = 01_other_ruins_location_found }
		# 	}
		# 	trigger_event = expedition_unique_encounters.003
		# }
	}

	# Ends Activity
	# scope:activity = {
	# 	set_variable = {
	# 		name = status
	# 		value = flag:expedition_is_over
	# 	}
	# }
}

disburse_expedition_activity_rewards = {
	# for the loc
	save_scope_as = root_scope

	scope:host = {
		if = {
			limit = {
				exists = scope:activity.var:expedition_gold_reward
				scope:activity.var:expedition_gold_reward > 0
			}
			add_gold = scope:activity.var:expedition_gold_reward
		}
	}

	scope:activity = {
		hidden_effect = {
			add_to_variable_list = {
				name = trait_rewards
				target = trait:adventurer
			}
		}

		every_attending_character = {
			debug_log = "char check"

			hidden_effect = {

				add_prestige = 100

				if = {
					limit = {
						NOT = {
							has_trait = adventurer
						}
					}
					debug_log = "adventurer trait gained"
					add_trait = adventurer
				}
	
				if = {
					limit = {
						culture = {
							has_cultural_tradition = tradition_adventurer_guilds 
						}
					}
					add_trait_xp = {
						trait = adventurer
						value = 20
					}
				}
				else = {
					add_trait_xp = {
						trait = adventurer
						value = 10
					}
				}
			}
		}
	}

	show_as_tooltip = {
		custom_tooltip = {
			text = expedition_reward_xp
		}

		custom_tooltip = {
			text = expedition_reward_prestige
		}

		# every_attending_character = {
		# 	add_prestige = 100
		# }

		# every_attending_character = {
		# 	if = {
		# 		limit = {
		# 			NOT = {
		# 				has_trait = adventurer
		# 			}
		# 		}
		# 		add_trait = adventurer
		# 	}
		# }

		
		# every_attending_character = {
		# 	if = {
		# 		limit = {
		# 			culture = {
		# 				has_cultural_tradition = tradition_adventurer_guilds 
		# 			}
		# 		}
		# 		add_trait_xp = {
		# 			trait = adventurer
		# 			value = 10
		# 		}
		# 	}
		# 	else = {
		# 		add_trait_xp = {
		# 			trait = adventurer
		# 			value = 20
		# 		}
		# 	}
		# }


	}
}