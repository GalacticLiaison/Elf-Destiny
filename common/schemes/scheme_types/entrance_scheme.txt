entrance = {
	# Basic Setup
	skill = intrigue
	desc = entrance_desc_general
	success_desc = "ENTRANCE_SUCCESS_DESC"
	icon = icon_scheme_entrance
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	target_type = character
	is_secret = yes
	maximum_breaches = 5
	is_basic = yes

	# Parameters
	speed_per_skill_point = -2.5
	spymaster_speed_per_skill_point = 0	
	base_progress_goal = 365
	base_maximum_success = 95
	minimum_success = 5
	
	# Core Triggers
	allow = {
		is_adult = yes
		is_any_elf_type = yes

		trigger_if = {
			limit = {
				NOT = { government_has_flag = government_is_landless_adventurer }
			}
			is_travelling = no
		}

		scope:target = {
			is_adult = yes
			trigger_if = {
				limit = {
					scope:owner = {
						NOT = { government_has_flag = government_is_landless_adventurer }
					}
				}
				is_travelling = no
			}
		}

		# # Mutual attraction is a hard limit because this scheme implies real romantic feelings and we don't model romantic attraction separately from sexual attraction
		# OR = {
		# 	is_ai = no	#Players may override their character's sexuality for the purposes of cynical seductions.
		# 	scope:owner = { is_attracted_to_gender_of = scope:target }	
		# }
				
		trigger_if = {
			limit = { is_ai = yes }
			scope:target = {
				# is_below_ai_lover_soft_cap_trigger = yes
				trigger_if = { # Block AI from seducing lowborn nobodies in the players court
					limit = {
						exists = liege
						liege = { is_ai = no }
						NOR = {
							is_courtier_of = scope:owner
							is_foreign_court_or_pool_guest_of = scope:owner
						}
					}
					OR = {
						is_lowborn = no
						is_playable_character = yes
					}
				}
				trigger_if = { #So players don't get spammed by AI seduction
					limit = {
						is_ai = no
					}
					NOT = {
						any_targeting_scheme = {
							scheme_type = entrance
						}
					}
				}
			}
		}


	}
	valid = {
		is_incapable = no
		#seducing done by or to minors is not allowed.
		scope:owner = {
			is_adult = yes
		}
		scope:target = {
			is_adult = yes
		}

		# One of you is imprisoned
		is_imprisoned = no
		scope:target = {
			is_imprisoned = no
		}

		# You're too far away
		scope:target = {
			OR = {
				exists = location
				in_diplomatic_range = scope:owner
			}
		}
	}
	use_secrecy = {
		# use_seduce_secrecy_trigger = {
		# 	TARGET = scope:target
		# 	OWNER = scope:owner
		# }
		always = no
	}

	odds_prediction = {
		# add = base_odds_prediction_target_is_char_value
		add = odds_skill_contribution_intrigue_value
		add = odds_entrance_elf_level_value
		add = odds_entrance_magic_talent_level_value
		add = odds_entrance_you_are_magi_value
		add = odds_entrance_they_are_magi_value
		add = odds_entrance_you_are_enchantress_value
		add = odds_entrance_they_are_enchantress_value
		add = odds_entrance_relationship
		add = odds_entrance_attraction
		# add = odds_entrance_testing_value
		min = 1
		max = 99
	}

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = INTRIGUE }
		
		# Countermeasures.
		apply_opportunistic_scheme_success_chance_adjustments_modifier = yes
		
		#Language
		modifier = {
			add = 5
			desc = YOU_SPEAK_THE_LANGUAGE
			scope:owner = { knows_language_of_culture = scope:target.culture }
		}

		modifier = {
			desc = "SCHEME_SCHEMER_TRAIT"
			scope:owner = { has_trait = seducer }
			add = 25
		}

		modifier = {
			desc = "SCHEME_SCHEMER_TRAIT"
			scope:owner = { has_trait = enchantress }
			add = 50
		}

		#Beauty good
		modifier = {
			desc = "scheme_beauty_good_1"
			scope:owner = { has_trait = beauty_good_1 }
			add = 10
		}
		modifier = {
			desc = "scheme_beauty_good_2"
			scope:owner = { has_trait = beauty_good_2 }
			add = 15
		}
		modifier = {
			desc = "scheme_beauty_good_3"
			scope:owner = { has_trait = beauty_good_3 }
			add = 20
		}

		#Physique good
		modifier = {
			desc = "scheme_physique_good_1"
			scope:owner = { has_trait = physique_good_1 }
			add = 5
		}
		modifier = {
			desc = "scheme_physique_good_2"
			scope:owner = { has_trait = physique_good_2 }
			add = 10
		}
		modifier = {
			desc = "scheme_physique_good_3"
			scope:owner = { has_trait = physique_good_3 }
			add = 15
		}

		#Beauty bad
		modifier = {
			desc = "scheme_beauty_bad_1"
			scope:owner = { has_trait = beauty_bad_1 }
			add = -10
		}
		modifier = {
			desc = "scheme_beauty_bad_2"
			scope:owner = { has_trait = beauty_bad_2 }
			add = -15
		}
		modifier = {
			desc = "scheme_beauty_bad_3"
			scope:owner = { has_trait = beauty_bad_3 }
			add = -20
		}

		#Venereal diseases
		modifier = {
			desc = "scheme_great_pox"
			scope:owner = { has_trait = great_pox }
			add = -50
		}
		modifier = {
			desc = "scheme_lovers_pox"
			scope:owner = { has_trait = lovers_pox }
			add = -25
		}
		modifier = {
			desc = "scheme_early_great_pox"
			scope:owner = { has_trait = early_great_pox }
			add = -25
		}

		# #Sexuality
		# modifier = {
		# 	desc = SCHEME_SEDUCE_WRONG_GENDER
		# 	scope:owner = {
		# 		NOR = {
		# 			is_attracted_to_gender_of = scope:target
		# 			has_perk = unshackled_lust_perk # Removed by the Unshackled Lust Perk
		# 		}
		# 	}
		# 	add = -25
		# }

		#TARGET#

		#Lustful/hedonist
		modifier = {
			desc = "SCHEME_REVELER"
			scope:target = { has_trait = lifestyle_reveler }
			add = 5
		}
		modifier = {
			desc = "SCHEME_LUSTFUL_TRAIT"
			scope:target = { has_trait = lustful }
			add = 10
		}

		#Chaste/shy
		modifier = {
			desc = "SCHEME_CHASTE_TRAIT"
			scope:target = { has_trait = chaste }
			add = -25
		}
		modifier = {
			desc = "SCHEME_SHY_TRAIT"
			scope:target = { has_trait = shy }
			add = -10
		}

		#Opinion of owner
		opinion_modifier = {
			who = scope:target
			opinion_target = scope:owner
			min = -50
			max = 50
			multiplier = 1.5
			step = 5
		}

		#Target is owner's spouse
		modifier = { #
			trigger = { scope:owner = { is_consort_of = scope:target } }
			scope:target = {
				NOT = { has_relation_rival = scope:owner }
			}
			add = 20
			desc = "SCHEME_SEDUCE_SPOUSE_BONUS"
		}

		modifier = {
			trigger = {
				scope:target = {
					is_married = yes
					NOT = { is_consort_of = scope:owner }
					exists = primary_spouse
					primary_spouse = { save_temporary_scope_as = target_spouse }
					NOT = { might_cheat_on_partner_trigger = { PARTNER = scope:target_spouse }}
				}
			}
			# Branching logic for opinion checks, to save performance
			add = {
				value = 0
				scope:target = {
					if = { # Hard block for AI seducers, they don't need the granularity and opinion checks are expensive performance-wise. 
						limit = { scope:owner = { is_ai = yes }}
						add = -1000
					}
					else_if = { # Players get scaling penalties depending on how high their target's opinion is of their primary spouse.
						limit = {
							has_relation_soulmate = scope:target_spouse
						}
						add = -500
					}
					else_if = {
						limit = {
							opinion = {
								target = scope:target_spouse
								value >= high_positive_opinion
							}
						}
						if = {
							limit = {
								opinion = {
									target = scope:target_spouse
									value < very_high_positive_opinion
								}
							}
							# Opinion between 80 and 100
							add = -100
						}
						else = {
							# Opinion between 60 and 80
							add = -75
						}
					}
					else = {
						if = {
							limit = {
								opinion = {
									target = scope:target_spouse
									value >= medium_positive_opinion
								}
							}
							# Opinion between 40 and 60
							add = -50
						}
						else = {
							# Opinion between 0 and 40 (technically -100 and 40 but at below 0 we shouldn't be in this trigger block at all since 'might_cheat_on_partner_trigger' will have passed).
							add = -25
						}
					}
				}
			}
			desc = "SCHEME_SEDUCE_SPOUSE_OPINION_PENALTY"
		}
	}

	base_secrecy = {
		add = secrecy_base_value
		add = countermeasure_apply_secrecy_maluses_value
	}
	
	# On Actions
	on_start = {
		debug_log = "STARTING ENTRANCE SCHEME"

		scheme_target_character = {
			save_scope_as = victim
		}
		scheme_owner = {
			save_scope_as = entrancer
			trigger_event = entrance_scheme.101
		}
	}
	on_phase_completed = {
		# # Grab our scopes.
		# save_scope_as = scheme
		# scheme_target_character = { save_scope_as = target }
		# scheme_owner = { save_scope_as = owner }
		# # Set up a block for the inappropriate cheating error?
		# save_scope_value_as = {
		# 	name = ignore_cheating_error_check
		# 	value = yes
		# }
		# # Proceed to rolls.
		# scope:scheme.scheme_owner = {
		# 	#Do I want to proceed to a roll?
		# 	if = {
		# 		limit = {
		# 			is_ai = no
		# 			use_seduce_secrecy_trigger = {
		# 				TARGET = scope:target
		# 				OWNER = scope:owner
		# 			}
		# 		}
		# 		trigger_event = seduce_outcome.0001
		# 	}
		# 	#Jump straight to roll
		# 	else = {
		# 		trigger_event = seduce_outcome.0002
		# 	}
		# }

		debug_log = "ENTRANCE COMPLETE"
	}
	on_monthly = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = entrancer }
		scheme_target_character = { save_scope_as = victim }


		# Since the scheme update, the way schemes handle progress seems to have changed, need a rework if want to use this this code
		# will call events directly in mean time instead

		# #Milestone 1 event
		# if = {
		# 	limit = {
		# 		scheme_progress >= 3
		# 		scheme_progress < 6
		# 		has_variable = entrance_in_holding
		# 		scheme_owner = {
		# 			is_available = yes
		# 		}
		# 		scheme_target_character = {
		# 			is_available = yes
		# 		}
		# 		player_target_available_for_personal_scheme_ongoing_events_trigger = {
		# 			OWNER = scope:entrancer
		# 			TARGET = scope:victim
		# 		}
		# 	}
		# 	scheme_owner = {
		# 		trigger_event = { on_action = entrance_in_holding_milestone_1 }
		# 	}
		# }
		# # #Milestone 2 event
		# else_if = {
		# 	limit = {
		# 		scheme_progress >= 6
		# 		has_variable = entrance_in_holding
		# 		scheme_owner = {
		# 			is_available = yes
		# 		}
		# 		scheme_target_character = {
		# 			is_available = yes
		# 		}
		# 		player_target_available_for_personal_scheme_ongoing_events_trigger = {
		# 			OWNER = scope:entrancer
		# 			TARGET = scope:victim
		# 		}
		# 	}
		# 	scheme_owner = {
		# 		trigger_event = { on_action = entrance_in_holding_milestone_2 }
		# 	}
		# }
	}
	on_invalidated = {
		scheme_target_character = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		scope:owner = {
			send_interface_toast = {
				type = event_toast_effect_neutral
				title = entrance
				left_icon = scope:target
				custom_tooltip = entrance_invalid
			}
		}
	}
}