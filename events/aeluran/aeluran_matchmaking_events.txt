namespace = aeluran_matchmaking

## HUGE TODO ## - Grand Wedding Implementation

# - TODO: When Player has a shot at a genetic trait of prophecy the advisor should guide them torwards that
# - TODO: Aeluran Advisor puts themself forward as candidate, event chain
# - TODO: Special high matraiarch pairing event chain

# Current Workflow
# - Checks which possiblities are available
# - rigidly decides to assign description blocks
# - rigidly assigns portraits

# Work towards a new random selector!
# random_list = {
# 	0 = {
# 		modifier = {
# 			add = x # rarity
# 			is_this_match_type_available
# 		}
# 	}
# }

# we really should ALWAYS have three options
	# - if need be, generate a second or even third standard match
# maybe have it go through the random_list three times, each time if a selction has already been picked, its modifier stays 0

aeluran_matchmaking.001 = {
	type = character_event
	title = aeluran_matchmaking.001.title
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = scope:recipient
				}
				desc = aeluran_matchmaking.001.desc.lord
			}
			triggered_desc = {
				trigger = {
					NOT = {
						scope:actor = scope:recipient
					}
				}
				desc = aeluran_matchmaking.001.desc.family
			}
		}
	}

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:recipient }
		character = scope:recipient
		animation = idle
	}
	right_portrait = {
		trigger = { exists = scope:aeluran_adviser }
		character = scope:aeluran_adviser
		animation = flirtation
	}

	immediate = {
		if = {
			limit = {
				exists = diarch
			}

			diarch = {
				save_scope_as = aeluran_adviser
			}
		}
	}

	option = {
		name = aeluran_matchmaking.001.ok

		if = {
			limit = {
				scope:actor = scope:recipient
				has_character_flag = refused_matchmaking
			}

			remove_character_flag = refused_matchmaking
		}
		else = {
			diarch = {
				set_variable = {
					name = requested_matchmaking_character
					value = scope:recipient
					# years = 5
				}
			}
		}
	}

	option = {
		name = aeluran_matchmaking.001.nvm
	}
}

aeluran_matchmaking.101 = {
	type = character_event
	title = aeluran_matchmaking.101.title
	desc = {
		desc = aeluran_matchmaking.101.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:lord_or_heir
					scope:lord_or_heir = flag:lord
				}
				desc = aeluran_matchmaking.101.desc.lord
			}
			triggered_desc = {
				trigger = {
					exists = scope:lord_or_heir
					scope:lord_or_heir = flag:heir
				}
				desc = aeluran_matchmaking.101.desc.heir
			}
			desc = aeluran_matchmaking.101.desc.fallback
		}
	}

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		triggered_animation = {
			trigger = {
				root = scope:match_recipient
			}
			animation = war_defender
		}
		triggered_animation = {
			trigger = {
				NOT = {
					root = scope:match_recipient
				}
			}
			animation = worry
		}
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = flirtation
	}

	immediate = {
		if = {
			limit = {
				exists = scope:match_recipient
			}
			if = {
				limit = {
					scope:match_recipient = root
				}
				save_scope_value_as = {
					name = lord_or_heir
					value = flag:lord
				}
			}
			else_if = {
				limit = {
					scope:match_recipient = {
						is_heir_of = root
					}
				}
				save_scope_value_as = {
					name = lord_or_heir
					value = flag:heir
				}
			}
		}
		else = {
			debug_log = "NO MATCH RECIPIENT!!"
		}
	}

	option = { # Begin Matchmaking
		name = aeluran_matchmaking.101.ok
		add_to_activity = scope:host.involved_activity
	}

	option = { # I will put this off for 5 years
		name = aeluran_matchmaking.101.snooze
		flavor = current_aeluran_control_level

		save_scope_value_as = {
			name = refusal_type
			value = flag:snooze
		}

		scope:host = {
			add_opinion = {
				target = root
				modifier = refused_aeluran_matchmaking
			}
		}

		random_list = {
			100 = {
				custom_tooltip = {
					text = aeluran_accepts_decision

					if = {
						limit = {
							exists = scope:activity
						}
						decline_activity_invite = scope:activity
					}

					trigger_event = aeluran_matchmaking.1014
				}

				custom_tooltip = matchmaking_postponed
			}
			0 = {
				modifier = {
					add = 75
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_1 
				}
				modifier = {
					add = 75
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_2
				}
				modifier = {
					add = 75
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_3 
				}
			
				custom_tooltip = {
					text = aeluran_challenges_decision
					trigger_event = aeluran_matchmaking.1011
				}
			}
		}
	}

	option = { # Dont attempt to matchmake me or my heir again
		name = aeluran_matchmaking.101.never_again
		flavor = current_aeluran_control_level

		save_scope_value_as = {
			name = refusal_type
			value = flag:permanent
		}

		if = {
			limit = {
				exists = scope:activity
			}
			decline_activity_invite = scope:activity
		}

		random_list = {
			100 = {
				custom_tooltip = {
					text = aeluran_accepts_decision

					if = {
						limit = {
							exists = scope:activity
						}
						decline_activity_invite = scope:activity
					}

					trigger_event = aeluran_matchmaking.1014
				}
				custom_tooltip = matchmaking_postponed_permanently
			}
			0 = {
				modifier = {
					add = 200
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_1 
				}
				modifier = {
					add = 200
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_2
				}
				modifier = {
					add = 200
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_3 
				}
			
				custom_tooltip = {
					text = aeluran_challenges_decision
					trigger_event = aeluran_matchmaking.1011
				}
			}
		}

		# Piety Penalty
		# Battle of Wills
			# win they listen
			# lost they suggest their lord is not himself and needs a nap. They will ask again in a years time
	}
}

aeluran_matchmaking.1011 = { # Aeluran Challenges Player To Battle Of Wills
	type = character_event
	title = aeluran_matchmaking.1011.title
	desc = aeluran_matchmaking.1011.desc

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = disbelief
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = anger
	}

	immediate = {
		save_scope_as = challenger

		scope:host = {
			save_scope_as = defender
		}
	}

	option = { # Learning
		name = aeluran_matchmaking.1011.learning
		
		flavor = battle_of_wills_modifiers_desc

		save_scope_value_as = {
			name = battle_of_wills_type
			value = flag:learning
		}

		if = {
			limit = {
				exists = scope:battle_of_wills_type
			}
			battle_of_wills_effect = {
				TYPE = scope:battle_of_wills_type
				CHALLENGER = root
				DEFENDER = scope:host
				CHALLENGER_WINS_EFFECT_TOOLTIP = lord_defeats_advisor_matchmaking_battle_of_wills
				CHALLENGER_LOSES_EFFECT_TOOLTIP = lord_loses_to_advisor_matchmaking_battle_of_wills
			}

			if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = yes
				}

				trigger_event = aeluran_matchmaking.1012
			}
			else_if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = no
				}

				trigger_event = aeluran_matchmaking.1013
			}
		}
	}

	option = { # Intrigue Diplo
		name = aeluran_matchmaking.1011.intrigue_diplo
		trigger = {
			culture = {
				has_cultural_parameter = entrance_scheme_unlocked
			}
		}
		
		flavor = battle_of_wills_modifiers_desc

		save_scope_value_as = {
			name = battle_of_wills_type
			value = flag:intrigue_diplomacy
		}

		if = {
			limit = {
				exists = scope:battle_of_wills_type
			}
			battle_of_wills_effect = {
				TYPE = scope:battle_of_wills_type
				CHALLENGER = root
				DEFENDER = scope:host
				CHALLENGER_WINS_EFFECT_TOOLTIP = lord_defeats_advisor_matchmaking_battle_of_wills
				CHALLENGER_LOSES_EFFECT_TOOLTIP = lord_loses_to_advisor_matchmaking_battle_of_wills
			}

			if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = yes
				}

				trigger_event = aeluran_matchmaking.1012
			}
			else_if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = no
				}

				trigger_event = aeluran_matchmaking.1013
			}
		}
	}


}

aeluran_matchmaking.1012 = { # Player Wins Battle Of Wills
	type = character_event
	title = aeluran_matchmaking.1012.title
	desc = aeluran_matchmaking.1012.desc

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		character = root
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = worry
	}

	immediate = {

		if = {
			limit = {
				exists = scope:refusal_type
				scope:refusal_type = flag:snooze
			}

			add_character_flag = {
				flag = refused_matchmaking
				years = 5
			}
		}
		else_if = {
			limit = {
				exists = scope:refusal_type
				scope:refusal_type = flag:permanent
			}

			add_character_flag = refused_matchmaking
		}
	}

	option = {
		name = aeluran_matchmaking.1012.ok

		change_diarchy_swing = -20
	}
}

aeluran_matchmaking.1013 = { # Player Losess Battle Of Wills
	type = character_event
	title = aeluran_matchmaking.1013.title
	desc = aeluran_matchmaking.1013.desc

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = worry
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = flirtation
	}

	immediate = {

	}

	option = {
		name = aeluran_matchmaking.1013.ok
		add_to_activity = scope:host.involved_activity

		change_diarchy_swing = 20
	}
}

aeluran_matchmaking.1014 = { # Aeluran Advicer Accepts The Matchmaking Refusal
	type = character_event
	title = aeluran_matchmaking.1014.title
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:refusal_type
					scope:refusal_type = flag:snooze
				}
				desc = aeluran_matchmaking.1014.desc.snooze
			}
			triggered_desc = {
				trigger = {
					exists = scope:refusal_type
					scope:refusal_type = flag:permanent
				}
				desc = aeluran_matchmaking.1014.desc.permanent
			}
		}
	}

	theme = aeluran_matriarch
	override_background = { reference = council_chamber }
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_rational
	}

	immediate = {
		if = {
			limit = {
				exists = scope:refusal_type
				scope:refusal_type = flag:snooze
			}

			add_character_flag = {
				flag = refused_matchmaking
				years = 5
			}
		}
		else_if = {
			limit = {
				exists = scope:refusal_type
				scope:refusal_type = flag:permanent
			}

			add_character_flag = refused_matchmaking
		}
	}

	option = {
		name = aeluran_matchmaking.1014.ok
	}
}

### Match Making ###
aeluran_matchmaking.002 = {
	hidden = yes

	immediate = {
		# need to check if family optione xists before using that matchmaking event

		# TODO: Mayebe having worse domination should actually increase the quality of matches! If the order has more control they can give better matches
		# TODO: How about we use High Matriarch Opinion!

		# matchmaking_candidate_quality

		generate_matchmaking_candidates_effect = yes
		# debug_log = matchmaking_debug_match_options

		# debug_log_scopes = yes

		trigger_event = aeluran_matchmaking.0022
	}
}

# aeluran_matchmaking.0121 = {
# 	hidden = yes

# 	immediate = {
# 		determine_aeluran_respect_score = yes
# 		determine_match_candidate_count = yes

# 		trigger_event = aeluran_matchmaking.0021
# 	}
# }

# Aeluran welcome to matchmaking
aeluran_matchmaking.0021 = {
	type = activity_event
	title = aeluran_matchmaking.0021.title

	# Domination will reduce choices to two/one at lower levels
	# Respect effects quality

	desc = {
		desc = aeluran_matchmaking.0021.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:activity.special_guest:match_recipient
					scope:activity.special_guest:match_recipient = root
				}
				desc = aeluran_matchmaking.0021.desc.lord
			}
			triggered_desc = {
				trigger = {
					exists = scope:activity.special_guest:match_recipient
					scope:activity.special_guest:match_recipient = {
						is_heir_of = root
					}
				}
				desc = aeluran_matchmaking.0021.desc.heir
			}
		}
		desc = aeluran_matchmaking.0021.desc.stats
	}

	window = tour_arrival_event
	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		character = root
		animation = personality_content
		camera = camera_body_right
	}
	center_portrait = {
		trigger = { 
			exists = scope:activity.special_guest:match_recipient
			NOT = {
				root = scope:activity.special_guest:match_recipient
			}
		}
		character = scope:activity.special_guest:match_recipient
		animation = worry
		camera = camera_body_right
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_content
		camera = camera_body_left_slight
	}

	immediate = {
		scope:host = {
			save_scope_as = aeluran_advisor
		}

		# debug_log_scopes = yes

		determine_aeluran_respect_score = yes
		determine_match_candidate_count = yes

		if = {
			limit = {
				exists = scope:aeluran_advisor
				NOT = {
					scope:aeluran_advisor = {
						has_hook = root
					}
				}
			}
			save_scope_value_as = {
				name = hook_available
				value = yes
			}
		}
	}

	option = {
		trigger = {
			exists = scope:hook_available
			scope:hook_available = yes
			NOT = {
				exists = scope:granted_hook
			}
		}
		name = aeluran_matchmaking.0021.hook

		scope:aeluran_advisor = {
			add_hook = {
				type = matchmaking_favoritism
				target = root
			}
		}

		save_scope_value_as = {
			name = granted_hook
			value = yes
		}

		trigger_event = aeluran_matchmaking.0021
	}

	option = {
		trigger = {
			root = {
				any_artifact = {
					has_variable = is_spark_crystal
				}
			}
			# NOT = {
			# 	exists = scope:gifted_crystal
			# }
		}
		name = aeluran_matchmaking.0021.crystal

		random_artifact = {
			limit = {
				artifact_owner = root
				has_variable = is_spark_crystal
			}
			save_scope_as = spark_crystal
		}

		custom_tooltip = {
			text = gift_spark_crystal_to_the_aeluran_order
			destroy_artifact = scope:spark_crystal
		}

		save_scope_value_as = {
			name = gifted_crystal
			value = yes
		}

		trigger_event = aeluran_matchmaking.0021
	}

	option = {
		name = aeluran_matchmaking.0021.ok
		trigger_event = aeluran_matchmaking.002
	}
}



# START HERE
# we are investigating why alliance doesnt work for heir and Im fairly sure you just need to verify "scope:matchmaking_recipient" is being set.
# check event 0026 to see that its being selected from the activity, maybe you need to update all references to be like that
# Finally nows probaly a good time to add the any child request matchmaking character interaction

# First Candidate
aeluran_matchmaking.0022 = {
	type = activity_event
	title = aeluran_matchmaking.0022.title
	desc = aeluran_matchmaking.0022.desc.lord

	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { 
			exists = scope:left_portrait_match_1
			NOT = {
				scope:match_choice_1_type = flag:aeluran_advisor
			}
		}
		character = scope:left_portrait_match_1
		triggered_animation = {
			trigger = {
				scope:left_portrait_match_1 = scope:host
			}
			animation = flirtation
		}
		triggered_animation = {
			trigger = {
				NOT = {
					scope:left_portrait_match_1 = scope:host
				}
			}
			animation = personality_content
		}
		camera = camera_body_right
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match_1 }
		character = scope:center_portrait_match_1
		animation = flirtation
		camera = camera_body_left_slight
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match_1 }
		character = scope:right_portrait_match_1
		animation = personality_content
		triggered_animation = {
			trigger = {
				scope:match_choice_1_type = flag:aeluran_advisor
			}
			animation = personality_bold
		}
		camera = camera_body_left_slight
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_1_type}

		if = {
			limit = { exists = scope:match_choice_1 }
			
			map_match_candidate = { MATCH_CHOICE = scope:match_choice_1 }
		}

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 1 }

		debug_log_scopes = yes
	}

	option = {
		name = aeluran_matchmaking.0022.ok

		if = {
			limit = {
				matchmaking_candidate_quantity > 1
			}
			trigger_event = aeluran_matchmaking.0023
		}
		else = {
			trigger_event = aeluran_matchmaking.0025
		}
	}
}

# Second Candidate
aeluran_matchmaking.0023 = {
	type = activity_event
	title = aeluran_matchmaking.0023.title
	desc = aeluran_matchmaking.0023.desc.lord

	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { 
			exists = scope:left_portrait_match_2
			NOT = {
				scope:match_choice_2_type = flag:aeluran_advisor
			}
		}
		character = scope:left_portrait_match_2
		triggered_animation = {
			trigger = {
				scope:left_portrait_match_2 = scope:host
			}
			animation = flirtation
		}
		triggered_animation = {
			trigger = {
				NOT = {
					scope:left_portrait_match_2 = scope:host
				}
			}
			animation = personality_content
		}
		camera = camera_body_right
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match_2 }
		character = scope:center_portrait_match_2
		animation = flirtation
		camera = camera_body_left_slight
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match_2 }
		character = scope:right_portrait_match_2
		animation = personality_content
		triggered_animation = {
			trigger = {
				scope:match_choice_2_type = flag:aeluran_advisor
			}
			animation = personality_bold
		}
		camera = camera_body_left_slight
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_2_type}

		if = {
			limit = { exists = scope:match_choice_2 }
			
			map_match_candidate = { MATCH_CHOICE = scope:match_choice_2 }
		}

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 2 }
	}

	option = {
		name = aeluran_matchmaking.0023.ok


		if = {
			limit = {
				matchmaking_candidate_quantity > 2
			}
			trigger_event = aeluran_matchmaking.0024
		}
		else = {
			trigger_event = aeluran_matchmaking.0025
		}
	}
}

# Third Candidate
aeluran_matchmaking.0024 = {
	type = activity_event
	title = aeluran_matchmaking.0024.title
	desc = aeluran_matchmaking.0024.desc.lord

	theme = aeluran_matriarch
	content_source = elf_destiny
	left_portrait = {
		trigger = { 
			exists = scope:left_portrait_match_3
			NOT = {
				scope:match_choice_3_type = flag:aeluran_advisor
			}
		}
		character = scope:left_portrait_match_3
		triggered_animation = {
			trigger = {
				scope:left_portrait_match_3 = scope:host
			}
			animation = flirtation
		}
		triggered_animation = {
			trigger = {
				NOT = {
					scope:left_portrait_match_3 = scope:host
				}
			}
			animation = personality_content
		}
		camera = camera_body_right
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match_3 }
		character = scope:center_portrait_match_3
		animation = flirtation
		camera = camera_body_left_slight
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match_3 }
		character = scope:right_portrait_match_3
		animation = personality_content
		triggered_animation = {
			trigger = {
				scope:match_choice_3_type = flag:aeluran_advisor
			}
			animation = personality_bold
		}
		camera = camera_body_left_slight
	}

	immediate = {
		map_match_candidate_type = { MATCH_TYPE = scope:match_choice_3_type}

		if = {
			limit = { exists = scope:match_choice_3 }
			
			map_match_candidate = { MATCH_CHOICE = scope:match_choice_3 }
		}

		assign_matchmaking_candidate_portraits_effect = { MATCHID = 3 }
	}

	option = {
		name = aeluran_matchmaking.0024.ok
		trigger_event = aeluran_matchmaking.0025
	}
}

# TODO: Handle no choice - battle of wills to refuse? Maybe make BoW (and respect penalty) for all refusals
### Match Making Choose Candidates Event Window ###
aeluran_matchmaking.0025 = {
	type = activity_event
	title = aeluran_matchmaking.0025.title
	
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					matchmaking_candidate_quantity > 1
				}
				desc = aeluran_matchmaking.0025.desc
			}
			desc = aeluran_matchmaking.0025.no_choice
		}
	}
	
	window = tour_arrival_event
	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:left_portrait_match_final }
		character = scope:left_portrait_match_final
		animation = personality_content
	}
	center_portrait = {
		trigger = { exists = scope:center_portrait_match_final }
		character = scope:center_portrait_match_final
		animation = flirtation
	}
	right_portrait = {
		trigger = { exists = scope:right_portrait_match_final }
		character = scope:right_portrait_match_final
		animation = personality_content
	}
	lower_center_portrait = {
		trigger = { exists = scope:lower_center_portrait_match_final }
		character = scope:lower_center_portrait_match_final
		animation = personality_content
	}
	lower_left_portrait = {
		trigger = { exists = scope:lower_left_portrait_match_final }
		character = scope:lower_left_portrait_match_final
		animation = personality_content
	}

	immediate = {

		assign_matchmaking_candidate_portraits_final_selection_effect = yes

		# NEW WORKFLOW
		# - you have three match_choice_x_type
		# - each with a scope match_choice_X / match_choice_X_X for multis

		# WE NEED
		# - to assign portraits
		# - to assign option names
			# - custom loc file?
		# - to assign event descriptions
			# - custom loc file?
		# - on selection marry spouse
		# - on selection clean up newly generated characters

		# debug_log_scopes = yes


	}

	# # Now Choose Your Spouse
	option = { # match_choice_1
		trigger = {
			OR = {
				exists = scope:match_choice_1
				exists = scope:match_choice_1_1
			}
		}

		name = aeluran_matchmaking.0025.option_1

		highlight_portrait = scope:left_portrait_match_final

		if = {
			limit = {
				OR = {
					scope:match_choice_1_type = flag:twins
					scope:match_choice_1_type = flag:triplets
				}
			}
			scope:match_choice_1_1 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}
		else = {
			scope:match_choice_1 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_1_type }

		trigger_event = aeluran_matchmaking.0026

		ai_chance = {
			base = 50
		}
		
		# new reasons can be made for the UI in character_event.gui line 1189
		# could put match icon then tool tip has 
		# a short desc - "A mighty warrior"
		# Match Stats - "Rarity:Rare , Match Quality: Top Quality (5)"

		# reason = friend
		# reason = faith
		# reason = activity_intent
		# reason = piety_level
		# reason = prestige_level
	}

	option = { # match_choice_2
		trigger = {
			OR = {
				exists = scope:match_choice_2
				exists = scope:match_choice_2_1
			}
		}

		
		name = aeluran_matchmaking.0025.option_2

		highlight_portrait = scope:center_portrait_match_final


		if = {
			limit = {
				OR = {
					scope:match_choice_2_type = flag:twins
					scope:match_choice_2_type = flag:triplets
				}
			}
			scope:match_choice_2_1 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}
		else = {
			scope:match_choice_2 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_2_type }

		trigger_event = aeluran_matchmaking.0026

		ai_chance = {
			base = 50
		}

	}

	option = { # match_choice_3
		trigger = {
			OR = {
				exists = scope:match_choice_3
				exists = scope:match_choice_3_1
			}
		}

		name = aeluran_matchmaking.0025.option_3

		highlight_portrait = scope:right_portrait_match_final

		if = {
			limit = {
				OR = {
					scope:match_choice_3_type = flag:twins
					scope:match_choice_3_type = flag:triplets
				}
			}
			scope:match_choice_3_1 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}
		else = {
			scope:match_choice_3 = {
				save_scope_as = selected_match_choice
				scope:activity = {
					set_variable = {
						name = selected_match_choice
						value = prev
					}
				}
			}
		}

		selection_option_bonus_effects = { MATCH_CHOICE_TYPE = scope:match_choice_3_type }

		trigger_event = aeluran_matchmaking.0026

		ai_chance = {
			base = 50
		}

	}

	option = { # none of them
		trigger = {
			NOT = {
				exists = scope:refusal_failed
			}
		}

		# TODO: IMPLEMENT REFUSAL CHALLENGE MECHANICS
		name = aeluran_matchmaking_choice.none
		flavor = current_aeluran_control_level

		save_scope_value_as = {
			name = refusal_type
			value = flag:snooze
		}

		scope:host = {
			add_opinion = {
				target = root
				modifier = denied_aeluran_matchmaking_candidates
			}
		}
		
		add_piety = -150

		random_list = {
			100 = {
				custom_tooltip = {
					text = aeluran_accepts_decision

					if = {
						limit = {
							exists = scope:activity
						}
						decline_activity_invite = scope:activity
					}

					trigger_event = aeluran_matchmaking.0030
				}

				custom_tooltip = matchmaking_postponed_after_presented
			}
			0 = {
				modifier = {
					add = 125
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_1 
				}
				modifier = {
					add = 125
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_2
				}
				modifier = {
					add = 125
					has_diarchy_active_parameter = aeluran_councillor_challenges_level_3 
				}
			
				custom_tooltip = {
					text = aeluran_challenges_decision
					trigger_event = aeluran_matchmaking.0027
				}
			}
		}
	}

	after = {
		cleanup_unpicked_generated_candidates_effect = yes
	}
}

aeluran_matchmaking.0026 = {
	type = activity_event
	title = aeluran_matchmaking.0026.title
	desc = aeluran_matchmaking.0026.desc

	window = tour_arrival_event
	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { 
			exists = scope:left_port
			NOT = {
				scope:selected_match_choice = scope:host
			}
		}
		character = scope:left_port
		# camera = camera_event_right_wedding
		triggered_animation = {
			trigger = { scope:left_port = scope:host } # its your advisor
			# animation = personality_content
			animation = flirtation
		}
		animation = admiration
	}
	center_portrait = {
		character = scope:spouse_female
		camera = camera_event_left_wedding
		animation = wedding_bride_left
	}
	right_portrait = {
		character = scope:spouse_male
		camera = camera_event_right_wedding
		animation = wedding_groom_right
	}
	lower_center_portrait = {
		trigger = { exists = scope:lower_center_port }
		character = scope:lower_center_port
		animation = personality_content
	}

	immediate = {
		if = {
			limit = {
				scope:activity.special_guest:match_recipient = {
					is_female = yes
				}
			}
			scope:activity.special_guest:match_recipient = {
				save_scope_as = spouse_female
			}
			scope:selected_match_choice = {
				save_scope_as = spouse_male
			}
		}
		else = {
			scope:activity.special_guest:match_recipient = {
				save_scope_as = spouse_male
			}
			scope:selected_match_choice = {
				save_scope_as = spouse_female
			}
		}

		if = {
			limit = {
				OR = {
					scope:match_choice_type = flag:twins
					scope:match_choice_type = flag:triplets
				}
			}

			if = {
				limit = { scope:selected_match_choice = scope:match_choice_1_1 }
				scope:match_choice_1_2 = { save_scope_as = left_port }

				if = {
					limit = {
						scope:match_choice_type = flag:triplets
					}
					scope:match_choice_1_3 = { save_scope_as = lower_center_port }
				}
			}
			else_if = {
				limit = { scope:selected_match_choice = scope:match_choice_2_1 }
				scope:match_choice_2_2 = { save_scope_as = left_port }

				if = {
					limit = {
						scope:match_choice_type = flag:triplets
					}
					scope:match_choice_2_3 = { save_scope_as = lower_center_port }
				}
			}
			else_if = {
				limit = { scope:selected_match_choice = scope:match_choice_3_1 }
				scope:match_choice_3_2 = { save_scope_as = left_port }

				if = {
					limit = {
						scope:match_choice_type = flag:triplets
					}
					scope:match_choice_3_3 = { save_scope_as = lower_center_port }
				}
			}
		}
		else = {
			scope:host = {
				save_scope_as = left_port
			}
		}

		scope:selected_match_choice = {
			if = {
				limit = { is_imprisoned = yes }
				release_from_prison = yes
			}
		}
	}

	option = {
		name = aeluran_matchmaking.0026.ok
		marry_match_option = yes
	}
	option = {
		name = aeluran_matchmaking.0026.grand_wedding
		betroth_match_option = yes
	}
}

aeluran_matchmaking.0027 = { # Aeluran Challenges Player To Battle Of Wills
	type = activity_event
	title = aeluran_matchmaking.0027.title
	desc = aeluran_matchmaking.0027.desc

	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		character = root
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = worry
	}

	immediate = {
		save_scope_as = challenger

		scope:host = {
			save_scope_as = defender
		}
	}

	option = { # Learning
		name = aeluran_matchmaking.0027.learning
		
		flavor = battle_of_wills_modifiers_desc

		save_scope_value_as = {
			name = battle_of_wills_type
			value = flag:learning
		}

		if = {
			limit = {
				exists = scope:battle_of_wills_type
			}
			battle_of_wills_effect = {
				TYPE = scope:battle_of_wills_type
				CHALLENGER = root
				DEFENDER = scope:host
				CHALLENGER_WINS_EFFECT_TOOLTIP = lord_defeats_advisor_matchmaking_battle_of_wills
				CHALLENGER_LOSES_EFFECT_TOOLTIP = lord_loses_to_advisor_matchmaking_battle_of_wills
			}

			if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = yes
				}

				trigger_event = aeluran_matchmaking.0028
			}
			else_if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = no
				}

				trigger_event = aeluran_matchmaking.0029
			}
		}
	}

	option = { # Intrigue Diplo
		name = aeluran_matchmaking.0027.intrigue_diplo
		trigger = {
			culture = {
				has_cultural_parameter = entrance_scheme_unlocked
			}
		}
		
		flavor = battle_of_wills_modifiers_desc

		save_scope_value_as = {
			name = battle_of_wills_type
			value = flag:intrigue_diplomacy
		}

		if = {
			limit = {
				exists = scope:battle_of_wills_type
			}
			battle_of_wills_effect = {
				TYPE = scope:battle_of_wills_type
				CHALLENGER = root
				DEFENDER = scope:host
				CHALLENGER_WINS_EFFECT_TOOLTIP = lord_defeats_advisor_matchmaking_battle_of_wills
				CHALLENGER_LOSES_EFFECT_TOOLTIP = lord_loses_to_advisor_matchmaking_battle_of_wills
			}

			if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = yes
				}

				trigger_event = aeluran_matchmaking.0028
			}
			else_if = {
				limit = {
					exists = scope:challenger_wins
					scope:challenger_wins = no
				}

				trigger_event = aeluran_matchmaking.0029
			}
		}
	}
}

aeluran_matchmaking.0028 = { # Player Wins Battle Of Wills
	type = activity_event
	title = aeluran_matchmaking.0028.title
	desc = aeluran_matchmaking.0028.desc

	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_rational
	}

	immediate = {
		add_character_flag = {
			flag = refused_matchmaking
			years = 5
		}
	}

	option = {
		name = aeluran_matchmaking.0028.ok

		change_diarchy_swing = -20
	}
}

aeluran_matchmaking.0029 = { # Player losess Battle Of Wills
	type = activity_event
	title = aeluran_matchmaking.0029.title
	desc = aeluran_matchmaking.0029.desc

	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = worry
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = flirtation
	}

	immediate = {

	}

	option = {
		name = aeluran_matchmaking.0029.ok

		change_diarchy_swing = 20

		save_scope_value_as = {
			name = refusal_failed
			value = yes
		}

		trigger_event = aeluran_matchmaking.0025
	}
}

aeluran_matchmaking.0030 = { # Aeluran Accepts Candidate Rejection
	type = activity_event
	title = aeluran_matchmaking.0030.title
	desc = aeluran_matchmaking.0030.desc

	window = tour_arrival_event
	theme = aeluran_matriarch
	content_source = elf_destiny

	left_portrait = {
		trigger = { exists = scope:match_recipient }
		character = scope:match_recipient
		animation = personality_bold
	}
	right_portrait = {
		trigger = { exists = scope:host }
		character = scope:host
		animation = personality_rational
	}

	immediate = {
		add_character_flag = {
			flag = refused_matchmaking
			years = 5
		}
	}

	option = {
		name = aeluran_matchmaking.0030.ok
	}
}