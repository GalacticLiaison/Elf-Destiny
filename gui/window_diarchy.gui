
window = {
	name = "diarchy_window"
	widgetid = "diarchy_window"
	visible = "[And( DiarchyWindow.IsVisible, Not(IsGameViewOpen('barbershop')) )]"
	layer = middle
	allow_outside = yes
	# size = {720 800}
	datacontext = "[DiarchyWindow.GetDiarchyOwner]"

	size = "[Select_CVector2f( IsAeluranRegency, '(CVector2f)720,550', '(CVector2f)720,800' )]"

	using = Window_Position_CharacterList_Small
	using = Window_Background
	using = Window_Decoration
	using = Window_Movable

	widget = {
		name = "tutorial_tab_visible_your_regent"
		widgetid = "tutorial_tab_visible_your_regent"
		visible = "[DiarchyWindow.IsYourDiarchyShown]"
		size = {0 0}
	}

	widget = {
		name = "tutorial_tab_visible_your_liege"
		visible = "[DiarchyWindow.IsLiegeDiarchyShown]"
		size = {0 0}
	}

	position = { -10 0 }

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard

		position_x = -10
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard

		position_x = 100
	}

	vbox = {
		datacontext = "[DiarchyWindow.GetDiarchyOwner]"
		datacontext = "[Character.GetDiarchy]"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "DIARCHY_WINDOW_HEADER"
			}

			blockoverride "button_close"
			{
				onclick = "[DiarchyWindow.Close]"
			}
		}

		hbox = {
			name = "your_liege_buttons"
			visible = "[And(Not( DiarchyWindow.GetCharacter.IsIndependentRuler ), Not(DiarchyWindow.IsAvailableDiarchsShown))]"
			layoutpolicy_horizontal = expanding

			button_tab = {
				name = "your_regent_tab_tutorial_uses_this"
				layoutpolicy_horizontal = expanding

				text = "DIARCHY_WINDOW_YOUR_TAB"

				onclick = "[DiarchyWindow.SetYourDiarchyTab]"
				down = "[DiarchyWindow.IsYourDiarchyShown]"

			}

			button_tab = {
				name = "liege_tab_tutorial_uses_this"
				visible = "[Not( DiarchyWindow.GetCharacter.IsIndependentRuler )]"
				layoutpolicy_horizontal = expanding

				text = "DIARCHY_WINDOW_LIEGE_TAB"

				onclick = "[DiarchyWindow.SetLiegeDiarchyTab]"
				down = "[DiarchyWindow.IsLiegeDiarchyShown]"
			}
		}

		hbox = {
			visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
			datacontext = "[GetIllustration( 'character_view_bg' )]"
			datacontext = "[DiarchyWindow.GetDiarchyOwner]"
			layoutpolicy_horizontal = expanding


			background =  {
				# datacontext = "[DiarchyWindow.GetDiarchyOwner]"

				visible = "[Not(IsAeluranRegency)]"
				texture = "[Illustration.GetTexture( DiarchyWindow.GetDisplayedDiarch.MakeScope )]"
				fittype = centercrop
				using = Mask_Rough_Edges
				alpha = 0.8
			}

			
			background =  {
				# datacontext = "[DiarchyWindow.GetDiarchyOwner]"

				visible = "[IsAeluranRegency]"
				# texture = "[Illustration.GetTexture( DiarchyWindow.GetDisplayedDiarch.MakeScope )]"
				texture = "gfx/interface/illustrations/skinned/illustrations/council/advisor_background_skinned.dds"
				fittype = centercrop
				using = Mask_Rough_Edges
				alpha = 0.8
			}

			portrait_regency = {
				name = "regency_portrait_tutorial_uses_this"
				datacontext = "[DiarchyWindow.GetDisplayedDiarch]"

				flowcontainer = {
					direction = vertical
					parentanchor = bottom|left
					position = { 8 -8 }

					flowcontainer = {
						name = "mandates_tutorial_uses_this"
						datamodel = "[DiarchyWindow.GetAvailableMandates]"
						direction = vertical

						item = {
							widget_mandate_button = {
								enabled = "[DiarchyWindow.IsMandateActive( Mandate.Self )]"
								# enabled = "[DiarchyWindow.CanChangeMandate]"
							}							
						}
					}

					text_label_left = {
						text = "[mandates|E]"
						max_width = 134
					}
				}


			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area_Dark

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
							blend_mode = alphamultiply
						}
					}

					text_label_center = {
						visible = "[Diarchy.IsValid]"
						layoutpolicy_horizontal = expanding

						text = "DIARCHY_WINDOW_STATUS_ACTIVE_DIARCHY"
						max_width = 340
					}

					text_label_center = {
						visible = "[Not( Diarchy.IsValid )]"
						layoutpolicy_horizontal = expanding

						text = "DIARCHY_WINDOW_STATUS_INACTIVE_DIARCHY"
					}
				}

				expand = {}

				vbox = {
					name = "scales_of_power_area_tutorial_uses_this"
					layoutpolicy_horizontal = expanding

					margin = { 16 0 }
					margin_top = 8
					margin_bottom = 16

					background = {
						using = Background_Area_Dark
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 4

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 4

							expand = {}

							icon = {
								name = "scales_of_power_icon"
								size = { 30 30 }
								texture = "gfx/interface/icons/scale_of_power.dds"
							}

							text_label_left = {
								# text = "[scales_of_power|E]"
								text = "[SelectLocalization(IsAeluranRegency, 'REGENCY_SCALE_AELURAN', 'REGENCY_SCALE_VANILLA' )]"

							}

							expand = {}
						}

						spacer = { #need to account for the rhombus shapes on the scales of power not being considered part of its size
							size = {0 8}
						}

						margin_widget = {
							name = "scales_of_power_bar"
							datacontext = "[DiarchyWindow.GetAlternativePowerLevels]"
							size = { 318 15 }
							allow_outside = yes

							hbox_complex_bar_progress_next = {
								layoutpolicy_horizontal = expanding

								blockoverride "texture_empty" {
									texture = "gfx/interface/progressbars/progress_red.dds"
								}

								tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_CURRENT_TOOLTIP"
								using = tooltip_se
							}

							hbox_complex_bar_levels = {
								layoutpolicy_horizontal = expanding

								blockoverride "marker" {
									widget = {
										parentanchor = center
										size = { 0 40 }
										allow_outside = yes

										visible = "[DiarchyWindow.IsVisiblePowerLevel( ComplexBarItem.GetValue )]"

										### Glow on current level animation
										icon = {
											name = "highlight_current_level"
											visible = "[DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )]"
											parentanchor = center
											size = { 65 65 }

											texture = "gfx/interface/window_roco_grandeur/pin_highlight.dds"

											state = {
												name = _show
												using = Animation_Curve_Default
												alpha = 0.6
											}

											state = {
												name = _hide
												using = Animation_Curve_Default
												alpha = 0
											}

											state = {
												name = "a"
												next = "b"
												trigger_on_create = yes
												alpha = 0.6

												modify_texture = {
													name = "glow_1"
													rotate_uv = 0
												}

												modify_texture = {
													name = "glow_2"
													rotate_uv = 0
												}
											}

											state = {
												name = "b"
												next = "a"
												duration = 7

												modify_texture = {
													name = "glow_1"
													rotate_uv = 360
												}

												modify_texture = {
													name = "glow_2"
													rotate_uv = 360
												}
											}

											modify_texture = {
												name = "glow_1"
												texture = "gfx/interface/component_masks/mask_glow.dds"
												blend_mode = alphamultiply
											}

											modify_texture = {
												name = "glow_2"
												texture = "gfx/interface/component_masks/mask_glow.dds"
												blend_mode = alphamultiply
												mirror = horizontal
											}
										}

										icon = {
											visible = "[And( DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue ), Not(IsAeluranRegency) )]"
											parentanchor = center
											size = { 45 45 }

											texture = "gfx/interface/window_regency/regency_level_bg.dds"

											tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_LEVEL_TOOLTIP"
											using = tooltip_se
										}

										icon = {
											visible = "[And( Not(DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )), Not(IsAeluranRegency) )]"
											parentanchor = center
											size = { 35 35 }

											texture = "gfx/interface/window_regency/regency_level_bg_inactive.dds"

											tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_LEVEL_TOOLTIP"
											using = tooltip_se
										}


										icon = {
											visible = "[And( DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue ), IsAeluranRegency)]"
											parentanchor = center
											size = { 45 45 }

											texture = "gfx/interface/window_regency/regency_level_bg.dds"

											tooltip = "DIARCHY_WINDOW_SCALES_OF_AELURAN_CONTROL_LEVEL_TOOLTIP"
											using = tooltip_se
										}

										icon = {
											visible = "[And( Not(DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )), IsAeluranRegency)]"
											parentanchor = center
											size = { 35 35 }

											texture = "gfx/interface/window_regency/regency_level_bg_inactive.dds"

											tooltip = "DIARCHY_WINDOW_SCALES_OF_AELURAN_CONTROL_LEVEL_TOOLTIP"
											using = tooltip_se
										}

										text_single = {
											visible = "[DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )]"
											parentanchor = center

											text = "[DiarchyWindow.GetLevelForSwing( ComplexBarItem.GetValue )]"
											default_format = "#high"
											align = nobaseline

										}

										text_single = {
											visible = "[Not(DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue ))]"
											parentanchor = center

											text = "[DiarchyWindow.GetLevelForSwing( ComplexBarItem.GetValue )]"
											align = nobaseline

										}
									}
								}
							}
						}

						spacer = { #need to account for the rhombus shapes on the scales of power not being considered part of its size
							size = {0 8}
						}

						text_multi = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(IsAeluranRegency)]"

							text = "DIARCHY_WINDOW_SCALES_OF_POWER_HELP"
							default_format = "#I"
							align = center
							autoresize = yes
							min_width = 346
							max_width = 346
						}

						text_multi = {
							visible = "[IsAeluranRegency]"
							layoutpolicy_horizontal = expanding

							text = "Monthly Aeluran Respect"
							# default_format = "#I"
							align = center
							autoresize = yes
							min_width = 346
							max_width = 346
						}

						text_multi = {
							visible = "[IsAeluranRegency]"
							layoutpolicy_horizontal = expanding

							text = "aeluran_diarchy_monthly_respect_swing"
							
							# default_format = "#I"
							align = center
							autoresize = yes
							min_width = 346
							max_width = 346

							# using = tooltip_se

							# tooltipwidget = {
							# 	widget_aeluran_respect_value_breakdown_tooltip = {}
							# }

							tooltipwidget = {
								widget_aeluran_respect_value_tooltip = {
									blockoverride "income"
									{
										visible = no
									}
								}
							}
						}

						button_battle_of_wills = {
							datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
							
							visible = "[EqualTo_string(DiarchyWindow.GetDiarchyOwner.GetDiarchyTypeNameNoTooltip, 'Aeluran Regency')]"
						}

						button_swing_scales = {
							datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
							# datacontext = "[DiarchyWindow.GetDiarchyOwner]"

							visible = "[And( And( DiarchyWindow.GetDiarchyOwner.IsLocalPlayer, Character.IsPlayerInteractionShown( 'swing_scales_currency_interaction' ) ), Not(IsAeluranRegency) )]"
						}

						# button_swing_scales = {
						# 	datacontext = "[DiarchyWindow.GetDiarchyOwner]"
						# 	visible = "[And( Not( Character.IsLocalPlayer ), Character.IsPlayerInteractionShown( 'swing_scales_currency_interaction' ) )]"
						# }
					}
				}

			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			minimumsize = { -1 102 }

			margin = { 16 8 }

			background = {
				using = Background_Area_Dark
			}

			vbox = {
				datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
				layoutpolicy_horizontal = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 8

					button_round = {
						name = "view_available_diarchs_tutorial_uses_this"
						visible = "[And( DiarchyWindow.CanDesignateDiarch, Not( DiarchyWindow.IsAvailableDiarchsShown ) )]"

						onclick = "[DiarchyWindow.ToggleAvailableDiarchs]"
						enabled = "[Not( DiarchyWindow.IsDesignateDiarchOnCooldown )]"

						tooltip = "DIARCHY_WINDOW_DIARCH_SELECTION_TOOLTIP"

						button_replace = {
							parentanchor = center
							alwaystransparent = yes
						}
					}

					button_back = {
						visible = "[And( DiarchyWindow.CanDesignateDiarch, DiarchyWindow.IsAvailableDiarchsShown )]"
						onclick = "[DiarchyWindow.ToggleAvailableDiarchs]"
						enabled = "[Not( DiarchyWindow.IsDesignateDiarchOnCooldown )]"
						tooltip = "DIARCHY_WINDOW_BACK_TOOLTIP"
						shortcut = "go_back"
						shortcut = "go_back_2"
						shortcut = "go_back_3"
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding

								text = "[DiarchyWindow.GetDiarchLabel]"
								max_width = 300
							}

							expand = {}

							widget = {
								size = { 230 20 }
								allow_outside = yes

								hbox = {
									parentanchor = center
									allow_outside = yes
									datacontext = "[DiarchyWindow.GetDiarchyOwner]"
									visible = "[Not(IsAeluranRegency)]"

									hbox_diarch_succession_score = {

										blockoverride "breakdown_datacontext"
										{
											datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
											
										}

										blockoverride "succession_score"
										{
											text = "[DiarchyWindow.GetDisplayedSuccessionScore]"
										}
									}

									hbox_skills_grid = {
										blockoverride "skills_datamodel"
										{
											datamodel = "[DiarchyWindow.GetSkills]"
										}
									}
								}

								hbox = {
									parentanchor = center
									allow_outside = yes
									datacontext = "[DiarchyWindow.GetDiarchyOwner]"
									visible = "[IsAeluranRegency]"

									hbox_skills_grid = {
										blockoverride "skills_datamodel"
										{
											datamodel = "[DiarchyWindow.GetSkills]"
										}
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding

								text = "[DiarchyWindow.GetDisplayedDiarch.GetUIName|U]"
								max_width = 300
								default_format = "#high"
							}

							expand = {}

							text_aptitude_label = {
								align = right

								blockoverride "breakdown_datacontext"
								{
									datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_loyalty_label = {
								blockoverride "breakdown_datacontext"
								{
									datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
								}
							}

							expand = {}

							hbox = {
								spacing = 5
								datacontext = "[DiarchyWindow.GetDisplayedDiarch]"

								icon = {
									name = "inactive_diarchy_warning"
									visible = "[And( Not( Diarchy.IsValid ), Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
									size = { 21 21 }

									texture = "gfx/interface/icons/symbols/icon_alert.dds"

									tooltip = "DIARCHY_WINDOW_BENEFITS_INACTIVE_DIARCHY"
								}

								icon = {
									name = "indisposed_diarch_warning"
									visible = "[And( And( Diarchy.IsValid, Not( DiarchyWindow.GetDisplayedDiarch.IsDiarchAble ) ), Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
									size = { 21 21 }

									texture = "gfx/interface/icons/symbols/icon_cross.dds"

									tooltip = "DIARCHY_WINDOW_BENEFITS_DIARCH_INDISPOSED"
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									visible = "[And( DiarchyWindow.IsYourDiarchyShown, Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"

									text = "DIARCHY_WINDOW_LIEGE_BENEFITS"
									align = left|nobaseline
									max_width = 240
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									visible = "[And( DiarchyWindow.IsLiegeDiarchyShown, Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"

									text = "DIARCHY_WINDOW_DIARCH_BENEFITS"
									align = left|nobaseline
									max_width = 260
								}
							}
						}
					}
				}
			}
		}

		vbox = {
			visible = "[And( Not(DiarchyWindow.IsAvailableDiarchsShown), Not(IsAeluranRegency))]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 8 8 }

			background = {
				using = Background_Area_With_Header
			}

			background = {
				texture = "gfx/interface/illustrations/window_headers/header_my_realm.dds"
				alpha = 0.5
				fittype = centercrop

				margin_top = -32

				using = Mask_Rough_Edges
			}

			text_single = {
				visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
				layoutpolicy_horizontal = expanding

				text = "DIARCHY_WINDOW_SUCCESSION"
				align = nobaseline

				margin = { 8 0 }
			}

			expand = {}

			fixedgridbox = {
				name = "regent_succession_tutorial_uses_this"
				visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"

				datamodel = "[DiarchyWindow.GetDiarchySuccession]"
				addcolumn = 150
				addrow = 160
				flipdirection = yes
				maxhorizontalslots = 4

				item = {
					widget = {
						datacontext = "[DiarchySuccessor.GetCharacter]"
						size = { 150 160 }

						vbox = {
							portrait_head = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 4

								expand = {}

								icon = {
									texture = "gfx/interface/icons/loyalty.dds"
									size = { 30 30 }
									framesize = { 60 60 }
									frame = "[Character.GetDiarchLoyaltyIconFrame]"

									tooltipwidget = {
										diarch_loyalty_breakdown_tooltip = {
											blockoverride "header_text" {
												text = "DIARCHY_WINDOW_DIARCH_LOYALTY"
											}
										}
									}
								}

								vbox = {
									layoutpolicy_vertical = expanding
									margin = { 0 8 }

									divider_light = {
										layoutpolicy_vertical = expanding
									}
								}

								hbox_diarch_succession_score = {
									blockoverride "succession_score"
									{
										text = "[DiarchySuccessor.GetScore]"
									}
								}

								expand = {}
							}
						}
					}
				}
			}

			expand = {}

			widget = {
				visible = "[And( Diarchy.IsValid, DiarchyWindow.IsYourDiarchyShown)]"
				size = { 622 50 }

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 8 8 }
					}

					button_primary = {
						name = "end_diarchy_tutorial_uses_this"
						datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
						size = { 300 36 }

						enabled = "[Character.IsPlayerInteractionValid( DiarchyWindow.GetEndInteractionName )]"
						onclick = "[Character.OpenPlayerInteraction( DiarchyWindow.GetEndInteractionName )]"

						text = DIARCHY_WINDOW_END_DIARCHY

						tooltip = "[Character.GetPlayerInteractionTooltip( DiarchyWindow.GetEndInteractionName )]"

						icon = {
							position = { 4 4 }
							size = { 30 30 }

							texture = "[GetCharacterInteraction( DiarchyWindow.GetEndInteractionName ).GetIcon]"
						}
					}
				}
			}

			widget = {
				visible = "[And( DiarchyWindow.GetDisplayedDiarch.IsLocalPlayer, Character.IsPlayerInteractionShown( 'diarch_entrench_regency_interaction' ) )]"
				size = { 622 50 }

				hbox = {
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 8 8 }
					}

					button_standard = {
						name = "entrench_regency"
						datacontext = "[DiarchyWindow.GetDiarchyOwner]"
						size = { 300 36 }

						onclick = "[Character.OpenPlayerInteraction( 'diarch_entrench_regency_interaction' )]"
						enabled = "[Character.IsPlayerInteractionValid( 'diarch_entrench_regency_interaction' )]"

						text = "[Character.GetPlayerInteractionName( 'diarch_entrench_regency_interaction' )]"

						tooltip = "[Character.GetPlayerInteractionTooltip( 'diarch_entrench_regency_interaction' )]"

						icon = {
							position = { 4 4 }
							size = { 30 30 }
							texture = "[GetCharacterInteraction( 'diarch_entrench_regency_interaction' ).GetIcon]"
						}
					}
				}
			}
		}

		vbox_character_list = {
			datacontext = "[DiarchyWindow.GetAvailableDiarchs]"
			visible = "[DiarchyWindow.IsAvailableDiarchsShown]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			minimumsize = { -1 420 }

			blockoverride "container_implementation" {
				fixedgridbox = {
					name = "characters_grid"
					datamodel = "[CharacterSelectionList.GetList]"
					visible = "[Not( CharacterSelectionList.IsBuildingList )]"
					layoutpolicy_horizontal = expanding
					addcolumn = 604
					addrow = 122

					item = {
						widget_diarch_candidate_item = {
							datacontext = "[CharacterListItem.GetCharacter]"
							size = { 604 122 }
						}
					}
				}
			}
		}
	}

	window_character_filter = {
		datacontext = "[DiarchyWindow.GetAvailableDiarchs]"
		visible_at_creation = no

		blockoverride "addition_filter" {

			vbox_filter_group = {
				datacontext = "[CharacterSelectionList.GetCategory('politics_filter_category')]"
				layoutpolicy_horizontal = expanding

				blockoverride "filters" {
					filter_item = {
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
						layoutpolicy_horizontal = expanding
					}

					filter_item = {
						datacontext = "[CharacterSelectionList.GetFilter('vassal_stance_filter')]"
						layoutpolicy_horizontal = expanding
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"

				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('health_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('imprisoned_filter')]"
					}
				}
			}
		}
	}
}

types DiarchyWindowTypes {
	type widget_diarch_candidate_item = widget {
		hbox = {
			spacing = 4

			background = {
				using = Background_Area_With_Header
				margin_right = 8
				margin_left = 4
			}

			portrait_head = {}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 4

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding

						text = "[Character.GetUINameNoTooltip]"
						fontsize_min = 14
						margin_right = 10
						max_width = 310
						autoresize = no

						using = Font_Size_Medium
						align = nobaseline
					}

					expand = {}

					hbox_skills_grid = {}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					using = character_age_or_death_text
					blockoverride "list_layout" {}

					text_single = {
						name = "character_relation"
						visible = "[Character.HasRelationTo( GetPlayer )]"
						layoutpolicy_horizontal = expanding

						text = "[Character.GetRelationToString( GetPlayer )]"
						default_format = "#low"
						align = nobaseline
						autoresize = no

						tooltip = "EXTENDED_RELATIONS_TOOLTIP"

						alwaystransparent = yes
					}

					expand = {
						visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin_bottom = 5

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 60 }

						background = {
							using = Background_Area_Dark

							margin_top = 3
							margin_bottom = 4
							margin_left = 10
							margin_right = 5

							alpha = 0.5
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							vbox = {
								text_aptitude_label = {
									layoutpolicy_horizontal = expanding
									text = "DIARCHY_WINDOW_DIARCH_APTITUDE_LIST"
								}

								text_loyalty_label = {
									layoutpolicy_horizontal = expanding
									text = "DIARCHY_WINDOW_DIARCH_LOYALTY_LIST"
								}

								text_single = {
									layoutpolicy_horizontal = expanding

									text = "DIARCHY_WINDOW_LIEGE_BENEFITS"
									max_width = 280
								}
							}

							expand = {}
						}

						expand = {}

						hbox = {
							layoutpolicy_vertical = expanding
							spacing = 5
							margin_right = 5
							

							divider_light = {
								layoutpolicy_vertical = expanding
								alpha = 0.5
							}

							hbox_diarch_succession_score = {
								blockoverride "succession_score"
								{
									text = "[CharacterListItem.GetFixedPoint( 'succession_score' )]"
								}
							}

							button_standard = {
								enabled = "[Not( DiarchyWindow.IsDesignateDiarchOnCooldown )]"
								size = { 120 30 }

								text = "DIARCHY_WINDOW_DESIGNATE_DIARCH"

								onclick = "[DiarchyWindow.DesignateDiarch( Character.Self )]"

								tooltip = "DIARCHY_WINDOW_DESIGNATE_DIARCH_TOOLTIP"
							}
						}
					}
				}
			}
		}
	}

	type hbox_diarch_succession_score = hbox {
		
		margin = { 0 4 }

		tooltipwidget = {
			
			diarch_score_breakdown_tooltip = {

				blockoverride "breakdown_datacontext"
				{
					datacontext = "[DiarchyWindow.GetDiarchySuccessionTooltip( Character.Self )]"
				}

				blockoverride "header_text" {
					text = "DIARCHY_WINDOW_SUCCESSION_SCORE_BREAKDOWN"
				}
			}
		}

		vote_chance_icon = {}

		text_single = {
			block "succession_score" {}

			min_width = 20
			align = nobaseline|hcenter
		}
	}

	type text_aptitude_label = text_single {
		text = "DIARCHY_WINDOW_DIARCH_APTITUDE"

		tooltipwidget = {
			diarch_score_breakdown_tooltip = {

				blockoverride "breakdown_datacontext"
				{
					datacontext = "[DiarchyWindow.GetDiarchAptitudeTooltip( Character.Self )]"
				}

				blockoverride "header_text" {
					text = "DIARCHY_WINDOW_DIARCH_APTITUDE_TOOLTIP"
				}
			}
		}
	}

	type diarch_loyalty_breakdown_tooltip = diarch_score_breakdown_tooltip {
		blockoverride "breakdown_datacontext"
		{
			datacontext = "[DiarchyWindow.GetDiarchyLoyaltyTooltip( Character.Self )]"
		}
	}

	type text_loyalty_label = text_single {
		text = "DIARCHY_WINDOW_DIARCH_LOYALTY"

		tooltipwidget = {
			diarch_loyalty_breakdown_tooltip = {
				blockoverride "header_text" {
					text = "DIARCHY_WINDOW_DIARCH_LOYALTY_TOOLTIP_HEADER"
				}
			}
		}
	}

	type widget_mandate_button = widget {
		size = { 46 46 }

		icon = {
			visible = "[DiarchyWindow.IsMandateActive( Mandate.Self )]"
			parentanchor = center
			size = { 58 58 }

			texture = "gfx/particles/halo.dds"
			color = { 1 0.85 0.6 1 }
		}

		button_round = {
			name = "mandate_item"
			size = { 46 46 }
			gfxtype = togglepushbuttongfx
			effectname = "NoHighlight"

			onclick = "[DiarchyWindow.SetMandate( Mandate.Self )]"
			down = "[DiarchyWindow.IsMandateActive( Mandate.Self )]"

			tooltipwidget = {
				widget = {
					using = GeneralTooltipSetup
					using = DefaultTooltipBackground
					alwaystransparent = no

					vbox = {
						set_parent_size_to_minimum = yes
						margin = { 15 15 }
						margin_top = 10
						spacing = 2

						text_multi = {
							text = "DIARCHY_WINDOW_MANDATE_TOOLTIP"
							min_width = 100
							max_width = 400
							autoresize = yes
							align = left
						}

						spacer = {
							size = { 20 20 }
						}

						text_multi = {
							visible = "[DiarchyWindow.CanChangeMandate]"
							layoutpolicy_horizontal = expanding

							text = "DIARCHY_WINDOW_MANDATE_CLICK_TOOLTIP"
							min_width = 100
							max_width = 400
							autoresize = yes
							align = left
						}

						text_single = {
							visible = "[InDebugMode]"
							layoutpolicy_horizontal = expanding

							raw_text = "Ai Score: [DiarchyWindow.GetMandateAiScore( Mandate.Self )]"
							default_format = "#D"
						}

						text_single = {
							visible = "[InDebugMode]"
							layoutpolicy_horizontal = expanding

							raw_text = "Qualification: [DiarchyWindow.GetQualificationScore( Mandate.Self )]"
							default_format = "#D"
						}
					}
				}
			}

			downframe = 1

			button_normal = {
				name = "mandate_icon"
				parentanchor = center
				widgetanchor = center
				effectname = "NoHighlight"
				gfxtype = togglepushbuttongfx
				shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
				texture = "[Mandate.GetIcon]"
				alwaystransparent = yes
				size = { 38 38 }
			}
		}
	}

	type button_swing_scales = button_standard {
		size = { 250 33 }

		onclick = "[Character.OpenPlayerInteraction( 'swing_scales_currency_interaction' )]"
		enabled = "[Character.IsPlayerInteractionValid( 'swing_scales_currency_interaction' )]"

		text = "DIARCHY_WINDOW_SWING_SCALES"

		tooltip = "[Character.GetPlayerInteractionTooltip( 'swing_scales_currency_interaction' )]"

		icon = {
			position = { 4 4 }
			size = { 27 27 }
			texture = "[GetCharacterInteraction( 'swing_scales_currency_interaction' ).GetIcon]"
		}
	}

	type button_battle_of_wills = button_standard {
		size = { 250 33 }

		onclick = "[Character.OpenPlayerInteraction( 'swing_aeluran_control_interaction' )]"
		# enabled = "[Character.IsPlayerInteractionValid( 'swing_aeluran_control_interaction' )]"
		# enabled = ""

		text = "battle_of_wills"

		tooltip = "[Character.GetPlayerInteractionTooltip( 'swing_aeluran_control_interaction' )]"

		icon = {
			position = { 4 4 }
			size = { 27 27 }
			texture = "[GetCharacterInteraction( 'swing_aeluran_control_interaction' ).GetIcon]"
		}
	}


	type widget_aeluran_respect_value_tooltip = widget {
		alwaystransparent = no

		block "background" { #### needed to solve the hack for tooltip in Realm View
			using = DefaultTooltipBackground
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			set_parent_size_to_minimum = yes
			margin = { 14 8 }
			margin_bottom = 18
			spacing = 14

			block "my_gold" {}

			vbox_aeluran_respect_value_breakdown = {
				name = "income"
				layoutpolicy_horizontal = expanding
				block "income" {}
			}

			vbox_aeluran_respect_value_breakdown = {
				name = "expenses"
				layoutpolicy_horizontal = expanding
				block "expenses" {}
			}

			block "gold_income" {}
		}
	}

	type vbox_aeluran_respect_value_breakdown = vbox {
		spacing = 6
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[ValueBreakdown.GetName]"
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 8
				}
			}

			vbox = {
				name = "values_grid"
				layoutpolicy_horizontal = expanding
				margin_top = 2

				hbox = { # Elf Tier
					name = "aeluran_respect_from_elf_tier"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_elf_tier"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_elf_tier')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_elf_tier_value_breakdown_list = {}
						}
					}
				}
				
				hbox = { # Genetic Excellence
					name = "aeluran_respect_from_genetics"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_genetic_quality"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_genetics')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_genetic_quality_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Highest Title Tier
					name = "aeluran_respect_from_title_tier"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_highest_title_tier"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_title_tier')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_highest_title_tier_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Spark Manipulation Skill
					name = "aeluran_respect_from_spark_manipulation"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_spark_manipulation"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_spark_manipulation')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_spark_manipulation_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Fame
					name = "aeluran_respect_from_fame"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_fame"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_fame_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Aeluran Affiliation
					name = "aeluran_respect_from_aeluran_affiliation"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_aeluran_affiliation"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_aeluran_affiliation')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_aeluran_affiliation_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Aeluran Opinion
					name = "aeluran_respect_from_aeluran_opinion"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_aeluran_opinion"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_aeluran_opinion')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_aeluran_opinion_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Hooks
					name = "aeluran_respect_from_hooks"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_hooks"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_hooks')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_hook_value_breakdown_list = {}
						}
					}
				}

				hbox = { # Sins
					name = "aeluran_respect_from_sins"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_sins"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_sins')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_sin_value_breakdown_list = {}
						}
					}
				}
				
				hbox = { # Status
					name = "aeluran_respect_from_status"
					layoutpolicy_horizontal = expanding
					spacing = 10

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "from_status"
					}

					text_single = {
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_status')|2]"
						align = right
						default_format = "#high"

						using = tooltip_se

						tooltipwidget = {
							widget_aeluran_respect_status_value_breakdown_list = {}
						}
					}
				}
			}

			# vbox = {
			# 	name = "values_grid"
			# 	datamodel = "[ValueBreakdown.GetSubValues]"
			# 	layoutpolicy_horizontal = expanding
			# 	margin_top = 2

			# 	item = {
			# 		hbox = {
			# 			name = "value_breakdown"
			# 			layoutpolicy_horizontal = expanding
			# 			spacing = 10

			# 			text_single = {
			# 				name = "name"
			# 				layoutpolicy_horizontal = expanding
			# 				text = "[ValueBreakdown.GetName]"
			# 			}

			# 			text_single = {
			# 				name = "value_with_tooltip"
			# 				visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
			# 				text = "[ValueBreakdown.GetValue|L]"
			# 				align = right
			# 				default_format = "#high"

			# 				using = tooltip_se

			# 				tooltipwidget = {
			# 					widget_value_breakdown_tooltip = {}
			# 				}
			# 			}

			# 			text_single = {
			# 				name = "value_with_no_tooltip"
			# 				visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
			# 				text = "[ValueBreakdown.GetValue]"
			# 				align = right
			# 			}
			# 		}
			# 	}
			# }

			# text_single = {
			# 	visible = "[Not(DataModelHasItems( ValueBreakdown.GetSubValues ))]"
			# 	layoutpolicy_horizontal = expanding
			# 	block "no_values" {
			# 		text = "VALUE_BREAKDOWN_NO_VALUES"
			# 	}
			# 	default_format = "#weak"
			# }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_score_actual')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	# Used in a 'top level' aka directly inside a `tooltipwidget = {}`
	## DELETE ME vvvvvv
	type widget_aeluran_respect_value_breakdown_tooltip = widget_aeluran_respect_elf_tier_value_breakdown_list
	{
		# blockoverride "header"
		# {
		# 	# We have the header be the name, if it exists
		# 	block "header" {
		# 		text_label_left = {
		# 			layoutpolicy_horizontal = expanding
		# 			block "header_text" {
		# 				# text = "[ValueBreakdown.GetName]"
		# 				text = "TEST HEADER"
		# 			}
		# 			default_format = "#T"
		# 			visible = "[Not( StringIsEmpty( ValueBreakdown.GetName ) )]"
		# 		}
		# 	}
		# }

		# blockoverride "background"
		# {
		# 	using = DefaultTooltipBackground
		# }

		# blockoverride "list"
		# {
		# 	# We want more spacing in bottom for this background
		# 	margin_bottom = 17
		# }
	}

	type widget_aeluran_respect_elf_tier_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_elf_tier"
				}
				default_format = "#T"
				# visible = "[Not( StringIsEmpty( ValueBreakdown.GetName ) )]"
			}

			hbox = {
				name = "aeluran_respect_from_elf_tier_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "[Character.Custom('Aeluran_Respect_From_Elf_Tier_Value_Name')]"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "value_with_no_tooltip"
					text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_elf_tier')|2+=]"
					align = right
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						# text = "[ValueBreakdown.GetValue|+]"
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_elf_tier')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_genetic_quality_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_genetic_quality"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_genetics_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_genetics"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_elf_tier')|2]"
				# 	# text = "[EmptyScope.ScriptValue('courtly_offence_greatly_offend_value')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_genetics')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_highest_title_tier_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_highest_title_tier"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_highest_title_tier_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_highest_title_tier"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "value_with_no_tooltip"
					text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_title_tier')|2+=]"
					align = right
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_title_tier')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_spark_manipulation_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_spark_manipulation"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_spark_manipulation_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_spark_manipulation"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "value_with_no_tooltip"
					text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_spark_manipulation')|2+=]"
					align = right
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_spark_manipulation')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_fame_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_fame"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_fame_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_fame"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "value_with_no_tooltip"
					text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
					align = right
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_aeluran_affiliation_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_aeluran_affiliation"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_aeluran_affiliation_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_aeluran_affiliation"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_aeluran_affiliation')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_aeluran_opinion_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_aeluran_opinion"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_aeluran_opinion_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_aeluran_opinion"
					min_width = 180
					max_width = 325
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_aeluran_opinion')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}


	type widget_aeluran_respect_hook_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_hooks"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_hooks_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_hooks"
					min_width = 180
					max_width = 325
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_hooks')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_sin_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_sins"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_sins_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_sins"
					min_width = 180
					max_width = 275
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_sins')|+=]"
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_aeluran_respect_status_value_breakdown_list = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3
			margin_bottom = 17

			text_label_left = {
				layoutpolicy_horizontal = expanding
				block "header_text" {
					text = "from_status"
				}
				default_format = "#T"
			}

			hbox = {
				name = "aeluran_respect_from_status_value"
				layoutpolicy_horizontal = expanding

				text_single = {
					name = "name"
					layoutpolicy_horizontal = expanding
					text = "aeluran_respect_from_status"
					min_width = 180
					max_width = 325
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					margin_right = 10
				}
	
				# text_single = {
				# 	layoutpolicy_horizontal = expanding
				# 	name = "value_with_no_tooltip"
				# 	text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_fame')|2]"
				# 	align = right
				# }
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding
						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[GetPlayer.MakeScope.ScriptValue('aeluran_respect_from_status')|+]"
						default_format = "#high"
					}
				}
			}
		}
	}
}
