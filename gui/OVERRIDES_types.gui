types OVERRIDE
{
	type dlc_button = button {
		datacontext = "[DlcItem.GetDlc]"
		size = "[Dlc.GetIconSize]"
		texture = "[Dlc.GetIcon]"
		onclick = "[DlcItem.ShowInStore]"
		tooltip = "ELF_DLC_BUTTON_TOOLTIP"
		using = tooltip_nw

		modify_texture = {
			# visible = "[Not( Dlc.IsEnabled )]"
			visible = "[Not(Or(Dlc.IsEnabled, EqualTo_string(DlcItem.GetDlc.GetName, 'Elf Destiny')))]"
			texture = "gfx/interface/colors/black.dds"
			blend_mode = normal
			alpha = 0.4
		}
	}

	# type legitimacy_hud_tooltip = elf_dest_object_tooltip_pop_out
	# {
	# 	blockoverride "title_text"
	# 	{
	# 		margin = { 0 8 }
	# 		text = "aeluran_hud_tt"
	# 		default_format = "#T"
	# 	}

	# 	blockoverride "concept_link"
	# 	{
	# 		text = "[legitimacy|E]"
	# 	}

	# 	blockoverride "subheading"
	# 	{
	# 		text_single = {
	# 			layoutpolicy_horizontal = expanding
	# 			autoresize = yes
	# 			fontsize_min = 14
	# 			using = Font_Size_Small
	# 			text = "aeluran_hud_tt_subheading"
	# 			default_format = "#weak"
	# 			fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 			max_width = 400

	# 			margin_top = -4
	# 		}
	# 	}

	# 	blockoverride "header_additions"
	# 	{
	# 		widget = {
	# 			size = { 120 74 }

	# 			widget = {
	# 				size = { 240 74 }
	# 				position = { -16 0 }

	# 				icon = {
	# 					size = { 100% 100% }
	# 					visible = "[GreaterThanOrEqualTo_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 					texture = "gfx/interface/window_legend_chronicle/expected_legitimacy_decoration.dds"

	# 					using = Mask_Rough_Edges

	# 					modify_texture = {
	# 						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
	# 						blend_mode = alphaMultiply
	# 					}
	# 				}

	# 				icon = {
	# 					size = { 100% 100% }
	# 					visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 					texture = "gfx/interface/window_legend_chronicle/under_expected_legitimacy_decoration.dds"

	# 					using = Mask_Rough_Edges

	# 					modify_texture = {
	# 						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
	# 						blend_mode = alphaMultiply
	# 					}
	# 				}
	# 			}
	# 		}
	# 	}


	# 	blockoverride "main_description"
	# 	{
	# 		vbox = {
	# 			layoutpolicy_horizontal = expanding
	# 			margin_right = 10

	# 			hbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				cooltip_paragraph = {
	# 					text = "LEGITIMACY_EFFECTS"
	# 					max_width = 500
	# 				}
	# 				expand = {
	# 					layoutpolicy_horizontal = expanding
	# 				}
	# 			}
	# 			spacer = {
	# 				size = { 0 15 }
	# 			}

	# 			hbox = {
	# 				name = "track_header"
	# 				layoutpolicy_horizontal = expanding
	# 				spacing = 5
	# 				margin_left = -10

	# 				background = {
	# 					using = Background_Area
	# 					margin = { -5 -5 }

	# 					modify_texture = {
	# 						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
	# 						blend_mode = alphaMultiply
	# 					}
	# 				}

	# 				icon_legitimacy_flat = {}

	# 				text_single = {
	# 					text = "LEGITIMACY_TRACK_TITLE"
	# 					layoutpolicy_horizontal = expanding
	# 					align = nobaseline
	# 				}
	# 			}

	# 			margin_widget = {
	# 				size = { 500 50 }
	# 				margin = { 10 0 }

	# 				datacontext = "[Character.GetLegitimacyType]"
	# 				datacontext = "[Character.GetLegitimacyLevel]"

	# 				hbox_complex_bar_progress = {
	# 					layoutpolicy_horizontal = expanding
	# 					margin_top = 30
	# 				}

	# 				hbox_complex_bar_levels = {
	# 					layoutpolicy_horizontal = expanding
	# 					position = { 0 -10 }
	# 					blockoverride "marker"
	# 					{
	# 						widget_level_marker = {
	# 							scale = 0.75

	# 							# Hide last one, it is the maximum not an actual level
	# 							visible = "[LessThan_int32( PdxGuiWidget.GetIndexInDataModel, GetDataModelSize( LegitimacyType.GetLevels ) )]"

	# 							blockoverride "marker_addon" {
	# 								icon = {
	# 									texture = "gfx/interface/colors/white.dds"
	# 									using = Mask_Rough_Edges
	# 									position = { -4 28 }
	# 									size = { 8 40 }
	# 									alpha = 0.4

	# 									visible = "[GreaterThan_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)0' )]"
	# 								}

	# 								widget = {
	# 									size = { 52 52 }
	# 									position = { -26 24 }
	# 									visible = "[EqualTo_int32( Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"

	# 									icon = {
	# 										size = { 100% 100% }
	# 										visible = "[Not(LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex ))]"
	# 										texture = "gfx/interface/window_legend_chronicle/pin_expected_legitimacy.dds"
	# 									}

	# 									icon = {
	# 										size = { 100% 100% }
	# 										visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 										texture = "gfx/interface/window_legend_chronicle/pin_under_expected_legitimacy.dds"
	# 									}

	# 									widget = {
	# 										parentanchor = center
	# 										size = { 28 28 }

	# 										icon_flat_standard_red = {
	# 											size = { 100% 100% }
	# 											visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 											texture = "gfx/interface/icons/flat_icons/legitimacy_small.dds"
	# 										}

	# 										icon_flat_standard = {
	# 											size = { 100% 100% }
	# 											visible = "[Not(LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex ))]"
	# 											texture = "gfx/interface/icons/flat_icons/legitimacy_small.dds"
	# 										}
	# 									}
	# 								}
	# 							}

	# 							blockoverride "visible_active"
	# 							{
	# 								visible = "[EqualTo_int32( LegitimacyLevel.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"
	# 							}

	# 							blockoverride "visible_inactive"
	# 							{
	# 								visible = "[NotEqualTo_int32( LegitimacyLevel.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"
	# 							}

	# 							blockoverride "marker_tooltip"
	# 							{
	# 								datacontext_from_model = {
	# 									datamodel = "[LegitimacyType.GetLevels]"
	# 									index = "[PdxGuiWidget.GetIndexInDataModel]"
	# 								}
	# 								tooltip = "LEGITIMACY_TRACK_TOOLTIP"
	# 								using = tooltip_se
	# 							}

	# 							blockoverride "marker_text"
	# 							{
	# 								text = "[PdxGuiWidget.GetIndexInDataModel|V]"
	# 							}
	# 						}
	# 					}
	# 				}
	# 			}

	# 			spacer = {
	# 				size = { 0 15 }
	# 			}
	# 			hbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				vbox = {
	# 					visible = "[Character.HasVassals]"
	# 					spacing = 10
	# 					layoutpolicy_horizontal = expanding

	# 					cooltip_paragraph = {
	# 						text = "LEGITIMACY_AVERAGE_EXPECTATIONS"
	# 					}

	# 					cooltip_paragraph = {
	# 						visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 						text = "LEGITIMACY_BELOW_AVERAGE_EXPECTATIONS"
	# 					}
	# 				}
	# 				expand = {
	# 					layoutpolicy_horizontal = expanding
	# 				}
	# 			}
	# 		}
	# 	}
	# }

	# type elf_dest_object_tooltip_pop_out = widget {
	# 	name = "ObjectTooltipDefault"
	# 	using = GeneralTooltipSetup
	# 	alwaystransparent = no

	# 	using = DefaultTooltipBackground

	# 	vbox = {
	# 		set_parent_size_to_minimum = yes
	# 		margin = { 20 5 }

	# 		hbox = {
	# 			layoutpolicy_horizontal = expanding
	# 			spacing = 10

	# 			background = {
	# 				name = "header"
	# 				texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
	# 				spriteType = Corneredstretched
	# 				margin = { 15 0 }
	# 				texture_density = 2

	# 				modify_texture = {
	# 					name = "mask"
	# 					texture = "gfx/interface/component_masks/mask_title_big_top.dds"
	# 					spriteType = Corneredstretched
	# 					spriteborder = { 160 0 }
	# 					blend_mode = alphamultiply
	# 					alpha = 0.5
	# 				}
	# 			}

	# 			block "header_tt" {
	# 				margin_bottom = 12
	# 			}

	# 			hbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				block "header_additions" {
	# 					hbox = {}
	# 				}

	# 				vbox = {
	# 					name = "FancyHeader"
	# 					layoutpolicy_horizontal = expanding
	# 					alwaystransparent = no

	# 					text_single = {
	# 						layoutpolicy_horizontal = expanding
	# 						autoresize = yes
	# 						name = "title"

	# 						fontsize_min = 14
	# 						using = Font_Size_Medium

	# 						block "title_text" {
	# 							margin = { 0 8 }
	# 						}
	# 						fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 					}

	# 					# use subtitle_text blockoverride or replace this entire block
	# 					block "subheading"
	# 					{
	# 						text_single = {
	# 							layoutpolicy_horizontal = expanding
	# 							autoresize = yes
	# 							fontsize_min = 14
	# 							using = Font_Size_Small
	# 							block "subtitle_text" {
	# 								text = ""
	# 							}
	# 							fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 							max_width = 400
	# 						}
	# 					}
	# 				}
	# 			}

	# 			expand = {}

	# 			vbox = {
	# 				layoutpolicy_vertical = expanding

	# 				text_single = {
	# 					name = "concept_link"
	# 					layoutpolicy_horizontal = expanding
	# 					block "concept_link" {
	# 						raw_text = "#D Missing concept link!#!"
	# 					}

	# 					fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 				}
	# 			}
	# 		}

	# 		vbox = {
	# 			layoutpolicy_horizontal = expanding
	# 			margin_right = 10

	# 			hbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				cooltip_paragraph = {
	# 					text = "LEGITIMACY_EFFECTS"
	# 					max_width = 500
	# 				}
	# 				expand = {
	# 					layoutpolicy_horizontal = expanding
	# 				}
	# 			}
	# 			spacer = {
	# 				size = { 0 15 }
	# 			}

	# 			hbox = {
	# 				name = "track_header"
	# 				layoutpolicy_horizontal = expanding
	# 				spacing = 5
	# 				margin_left = -10

	# 				background = {
	# 					using = Background_Area
	# 					margin = { -5 -5 }

	# 					modify_texture = {
	# 						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
	# 						blend_mode = alphaMultiply
	# 					}
	# 				}

	# 				icon_legitimacy_flat = {}

	# 				text_single = {
	# 					text = "LEGITIMACY_TRACK_TITLE"
	# 					layoutpolicy_horizontal = expanding
	# 					align = nobaseline
	# 				}
	# 			}

	# 			margin_widget = {
	# 				size = { 500 50 }
	# 				margin = { 10 0 }

	# 				datacontext = "[Character.GetLegitimacyType]"
	# 				datacontext = "[Character.GetLegitimacyLevel]"

	# 				hbox_complex_bar_progress = {
	# 					layoutpolicy_horizontal = expanding
	# 					margin_top = 30
	# 				}

	# 				hbox_complex_bar_levels = {
	# 					layoutpolicy_horizontal = expanding
	# 					position = { 0 -10 }
	# 					blockoverride "marker"
	# 					{
	# 						widget_level_marker = {
	# 							scale = 0.75

	# 							# Hide last one, it is the maximum not an actual level
	# 							visible = "[LessThan_int32( PdxGuiWidget.GetIndexInDataModel, GetDataModelSize( LegitimacyType.GetLevels ) )]"

	# 							blockoverride "marker_addon" {
	# 								icon = {
	# 									texture = "gfx/interface/colors/white.dds"
	# 									using = Mask_Rough_Edges
	# 									position = { -4 28 }
	# 									size = { 8 40 }
	# 									alpha = 0.4

	# 									visible = "[GreaterThan_int32( PdxGuiWidget.GetIndexInDataModel, '(int32)0' )]"
	# 								}

	# 								widget = {
	# 									size = { 52 52 }
	# 									position = { -26 24 }
	# 									visible = "[EqualTo_int32( Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"

	# 									icon = {
	# 										size = { 100% 100% }
	# 										visible = "[Not(LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex ))]"
	# 										texture = "gfx/interface/window_legend_chronicle/pin_expected_legitimacy.dds"
	# 									}

	# 									icon = {
	# 										size = { 100% 100% }
	# 										visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 										texture = "gfx/interface/window_legend_chronicle/pin_under_expected_legitimacy.dds"
	# 									}

	# 									widget = {
	# 										parentanchor = center
	# 										size = { 28 28 }

	# 										icon_flat_standard_red = {
	# 											size = { 100% 100% }
	# 											visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 											texture = "gfx/interface/icons/flat_icons/legitimacy_small.dds"
	# 										}

	# 										icon_flat_standard = {
	# 											size = { 100% 100% }
	# 											visible = "[Not(LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex ))]"
	# 											texture = "gfx/interface/icons/flat_icons/legitimacy_small.dds"
	# 										}
	# 									}
	# 								}
	# 							}

	# 							blockoverride "visible_active"
	# 							{
	# 								visible = "[EqualTo_int32( LegitimacyLevel.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"
	# 							}

	# 							blockoverride "visible_inactive"
	# 							{
	# 								visible = "[NotEqualTo_int32( LegitimacyLevel.GetIndex, PdxGuiWidget.GetIndexInDataModel )]"
	# 							}

	# 							blockoverride "marker_tooltip"
	# 							{
	# 								datacontext_from_model = {
	# 									datamodel = "[LegitimacyType.GetLevels]"
	# 									index = "[PdxGuiWidget.GetIndexInDataModel]"
	# 								}
	# 								tooltip = "LEGITIMACY_TRACK_TOOLTIP"
	# 								using = tooltip_se
	# 							}

	# 							blockoverride "marker_text"
	# 							{
	# 								text = "[PdxGuiWidget.GetIndexInDataModel|V]"
	# 							}
	# 						}
	# 					}
	# 				}
	# 			}

	# 			spacer = {
	# 				size = { 0 15 }
	# 			}
	# 			hbox = {
	# 				layoutpolicy_horizontal = expanding

	# 				vbox = {
	# 					visible = "[Character.HasVassals]"
	# 					spacing = 10
	# 					layoutpolicy_horizontal = expanding

	# 					cooltip_paragraph = {
	# 						text = "LEGITIMACY_AVERAGE_EXPECTATIONS"
	# 					}

	# 					cooltip_paragraph = {
	# 						visible = "[LessThan_int32( LegitimacyLevel.GetIndex, Character.GetAveragePowerfulVassalLegitimacyExpectation.GetIndex )]"
	# 						text = "LEGITIMACY_BELOW_AVERAGE_EXPECTATIONS"
	# 					}
	# 				}
	# 				expand = {
	# 					layoutpolicy_horizontal = expanding
	# 				}
	# 			}
	# 		}

	# 		textbox = {
	# 			name = "TooltipTextShortcut"
	# 			layoutpolicy_horizontal = expanding
	# 			using = DefaultTooltipText
	# 			margin = { 10 5 }
	# 			margin_top = 10
	# 		}


	# 		# =========================


	# 		# vbox = {
	# 		# 	# datacontext = "[GetPlayer]"
	# 		# 	# datacontext = "[ToggleGameViewData( 'diarchy', Character.GetID )]"
	# 		# 	# datacontext = "[DiarchyWindow.Self]"
	# 		# 	# datacontext = "[DiarchyWindow.GetDiarchyOwner]"
	# 		# 	# datacontext = "[Character.GetDiarchy]"
	# 		# 	layoutpolicy_vertical = expanding
	# 		# 	layoutpolicy_horizontal = expanding
		
	# 		# 	using = Window_Margins
		
	# 		# 	header_pattern = {
	# 		# 		layoutpolicy_horizontal = expanding
		
	# 		# 		blockoverride "header_text"
	# 		# 		{
	# 		# 			text = "DIARCHY_WINDOW_HEADER"
	# 		# 		}
		
	# 		# 		blockoverride "button_close"
	# 		# 		{
	# 		# 			onclick = "[DiarchyWindow.Close]"
	# 		# 		}
	# 		# 	}
		
	# 		# 	hbox = {
	# 		# 		name = "your_liege_buttons"
	# 		# 		visible = "[And(Not( DiarchyWindow.GetCharacter.IsIndependentRuler ), Not(DiarchyWindow.IsAvailableDiarchsShown))]"
	# 		# 		layoutpolicy_horizontal = expanding
		
	# 		# 		button_tab = {
	# 		# 			name = "your_regent_tab_tutorial_uses_this"
	# 		# 			layoutpolicy_horizontal = expanding
		
	# 		# 			text = "DIARCHY_WINDOW_YOUR_TAB"
		
	# 		# 			onclick = "[DiarchyWindow.SetYourDiarchyTab]"
	# 		# 			down = "[DiarchyWindow.IsYourDiarchyShown]"
		
	# 		# 		}
		
	# 		# 		button_tab = {
	# 		# 			name = "liege_tab_tutorial_uses_this"
	# 		# 			visible = "[Not( DiarchyWindow.GetCharacter.IsIndependentRuler )]"
	# 		# 			layoutpolicy_horizontal = expanding
		
	# 		# 			text = "DIARCHY_WINDOW_LIEGE_TAB"
		
	# 		# 			onclick = "[DiarchyWindow.SetLiegeDiarchyTab]"
	# 		# 			down = "[DiarchyWindow.IsLiegeDiarchyShown]"
	# 		# 		}
	# 		# 	}
		
	# 		# 	hbox = {
	# 		# 		visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
	# 		# 		datacontext = "[GetIllustration( 'character_view_bg' )]"
	# 		# 		layoutpolicy_horizontal = expanding
		
	# 		# 		background =  {
	# 		# 			texture = "[Illustration.GetTexture( DiarchyWindow.GetDisplayedDiarch.MakeScope )]"
	# 		# 			fittype = centercrop
	# 		# 			using = Mask_Rough_Edges
	# 		# 			alpha = 0.8
	# 		# 		}
		
	# 		# 		portrait_regency = {
	# 		# 			name = "regency_portrait_tutorial_uses_this"
	# 		# 			datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
		
	# 		# 			flowcontainer = {
	# 		# 				direction = vertical
	# 		# 				parentanchor = bottom|left
	# 		# 				position = { 8 -8 }
		
	# 		# 				flowcontainer = {
	# 		# 					name = "mandates_tutorial_uses_this"
	# 		# 					datamodel = "[DiarchyWindow.GetAvailableMandates]"
	# 		# 					direction = vertical
		
	# 		# 					item = {
	# 		# 						widget_mandate_button = {
	# 		# 							enabled = "[DiarchyWindow.CanChangeMandate]"
	# 		# 						}
	# 		# 					}
	# 		# 				}
		
	# 		# 				text_label_left = {
	# 		# 					text = "[mandates|E]"
	# 		# 					max_width = 134
	# 		# 				}
	# 		# 			}
		
		
	# 		# 		}
		
	# 		# 		vbox = {
	# 		# 			layoutpolicy_horizontal = expanding
	# 		# 			layoutpolicy_vertical = expanding
		
	# 		# 			vbox = {
	# 		# 				layoutpolicy_horizontal = expanding
		
	# 		# 				background = {
	# 		# 					using = Background_Area_Dark
		
	# 		# 					modify_texture = {
	# 		# 						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
	# 		# 						blend_mode = alphamultiply
	# 		# 					}
	# 		# 				}
		
	# 		# 				text_label_center = {
	# 		# 					visible = "[Diarchy.IsValid]"
	# 		# 					layoutpolicy_horizontal = expanding
		
	# 		# 					text = "DIARCHY_WINDOW_STATUS_ACTIVE_DIARCHY"
	# 		# 					max_width = 340
	# 		# 				}
		
	# 		# 				text_label_center = {
	# 		# 					visible = "[Not( Diarchy.IsValid )]"
	# 		# 					layoutpolicy_horizontal = expanding
		
	# 		# 					text = "DIARCHY_WINDOW_STATUS_INACTIVE_DIARCHY"
	# 		# 				}
	# 		# 			}
		
	# 		# 			expand = {}
		
	# 		# 			vbox = {
	# 		# 				name = "scales_of_power_area_tutorial_uses_this"
	# 		# 				layoutpolicy_horizontal = expanding
		
	# 		# 				margin = { 16 0 }
	# 		# 				margin_top = 8
	# 		# 				margin_bottom = 16
		
	# 		# 				background = {
	# 		# 					using = Background_Area_Dark
	# 		# 				}
		
	# 		# 				vbox = {
	# 		# 					layoutpolicy_horizontal = expanding
	# 		# 					spacing = 4
		
	# 		# 					hbox = {
	# 		# 						layoutpolicy_horizontal = expanding
	# 		# 						spacing = 4
		
	# 		# 						expand = {}
		
	# 		# 						icon = {
	# 		# 							name = "scales_of_power_icon"
	# 		# 							size = { 30 30 }
	# 		# 							texture = "gfx/interface/icons/scale_of_power.dds"
	# 		# 						}
		
	# 		# 						text_label_left = {
	# 		# 							text = "[scales_of_power|E]"
	# 		# 						}
		
	# 		# 						expand = {}
	# 		# 					}
		
	# 		# 					spacer = { #need to account for the rhombus shapes on the scales of power not being considered part of its size
	# 		# 						size = {0 8}
	# 		# 					}
		
	# 		# 					margin_widget = {
	# 		# 						name = "scales_of_power_bar"
	# 		# 						datacontext = "[DiarchyWindow.GetAlternativePowerLevels]"
	# 		# 						size = { 318 15 }
	# 		# 						allow_outside = yes
		
	# 		# 						hbox_complex_bar_progress_next = {
	# 		# 							layoutpolicy_horizontal = expanding
		
	# 		# 							blockoverride "texture_empty" {
	# 		# 								texture = "gfx/interface/progressbars/progress_red.dds"
	# 		# 							}
		
	# 		# 							tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_CURRENT_TOOLTIP"
	# 		# 							using = tooltip_se
	# 		# 						}
		
	# 		# 						hbox_complex_bar_levels = {
	# 		# 							layoutpolicy_horizontal = expanding
		
	# 		# 							blockoverride "marker" {
	# 		# 								widget = {
	# 		# 									parentanchor = center
	# 		# 									size = { 0 40 }
	# 		# 									allow_outside = yes
		
	# 		# 									visible = "[DiarchyWindow.IsVisiblePowerLevel( ComplexBarItem.GetValue )]"
		
	# 		# 									### Glow on current level animation
	# 		# 									icon = {
	# 		# 										name = "highlight_current_level"
	# 		# 										visible = "[DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )]"
	# 		# 										parentanchor = center
	# 		# 										size = { 65 65 }
		
	# 		# 										texture = "gfx/interface/window_roco_grandeur/pin_highlight.dds"
		
	# 		# 										state = {
	# 		# 											name = _show
	# 		# 											using = Animation_Curve_Default
	# 		# 											alpha = 0.6
	# 		# 										}
		
	# 		# 										state = {
	# 		# 											name = _hide
	# 		# 											using = Animation_Curve_Default
	# 		# 											alpha = 0
	# 		# 										}
		
	# 		# 										state = {
	# 		# 											name = "a"
	# 		# 											next = "b"
	# 		# 											trigger_on_create = yes
	# 		# 											alpha = 0.6
		
	# 		# 											modify_texture = {
	# 		# 												name = "glow_1"
	# 		# 												rotate_uv = 0
	# 		# 											}
		
	# 		# 											modify_texture = {
	# 		# 												name = "glow_2"
	# 		# 												rotate_uv = 0
	# 		# 											}
	# 		# 										}
		
	# 		# 										state = {
	# 		# 											name = "b"
	# 		# 											next = "a"
	# 		# 											duration = 7
		
	# 		# 											modify_texture = {
	# 		# 												name = "glow_1"
	# 		# 												rotate_uv = 360
	# 		# 											}
		
	# 		# 											modify_texture = {
	# 		# 												name = "glow_2"
	# 		# 												rotate_uv = 360
	# 		# 											}
	# 		# 										}
		
	# 		# 										modify_texture = {
	# 		# 											name = "glow_1"
	# 		# 											texture = "gfx/interface/component_masks/mask_glow.dds"
	# 		# 											blend_mode = alphamultiply
	# 		# 										}
		
	# 		# 										modify_texture = {
	# 		# 											name = "glow_2"
	# 		# 											texture = "gfx/interface/component_masks/mask_glow.dds"
	# 		# 											blend_mode = alphamultiply
	# 		# 											mirror = horizontal
	# 		# 										}
	# 		# 									}
		
	# 		# 									icon = {
	# 		# 										visible = "[DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )]"
	# 		# 										parentanchor = center
	# 		# 										size = { 45 45 }
		
	# 		# 										texture = "gfx/interface/window_regency/regency_level_bg.dds"
		
	# 		# 										tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_LEVEL_TOOLTIP"
	# 		# 										using = tooltip_se
	# 		# 									}
		
	# 		# 									icon = {
	# 		# 										visible = "[Not(DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue ))]"
	# 		# 										parentanchor = center
	# 		# 										size = { 35 35 }
		
	# 		# 										texture = "gfx/interface/window_regency/regency_level_bg_inactive.dds"
		
	# 		# 										tooltip = "DIARCHY_WINDOW_SCALES_OF_POWER_LEVEL_TOOLTIP"
	# 		# 										using = tooltip_se
	# 		# 									}
		
	# 		# 									text_single = {
	# 		# 										visible = "[DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue )]"
	# 		# 										parentanchor = center
		
	# 		# 										text = "[DiarchyWindow.GetLevelForSwing( ComplexBarItem.GetValue )]"
	# 		# 										default_format = "#high"
	# 		# 										align = nobaseline
		
	# 		# 									}
		
	# 		# 									text_single = {
	# 		# 										visible = "[Not(DiarchyWindow.IsCurrentPowerLevel( ComplexBarItem.GetValue ))]"
	# 		# 										parentanchor = center
		
	# 		# 										text = "[DiarchyWindow.GetLevelForSwing( ComplexBarItem.GetValue )]"
	# 		# 										align = nobaseline
		
	# 		# 									}
	# 		# 								}
	# 		# 							}
	# 		# 						}
	# 		# 					}
		
	# 		# 					spacer = { #need to account for the rhombus shapes on the scales of power not being considered part of its size
	# 		# 						size = {0 8}
	# 		# 					}
		
	# 		# 					text_multi = {
	# 		# 						layoutpolicy_horizontal = expanding
		
	# 		# 						text = "DIARCHY_WINDOW_SCALES_OF_POWER_HELP"
	# 		# 						default_format = "#I"
	# 		# 						align = center
	# 		# 						autoresize = yes
	# 		# 						min_width = 346
	# 		# 						max_width = 346
	# 		# 					}
		
	# 		# 					button_swing_scales = {
	# 		# 						datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 						visible = "[And( DiarchyWindow.GetDiarchyOwner.IsLocalPlayer, Character.IsPlayerInteractionShown( 'swing_scales_currency_interaction' ) )]"
	# 		# 					}
		
	# 		# 					button_swing_scales = {
	# 		# 						datacontext = "[DiarchyWindow.GetDiarchyOwner]"
	# 		# 						visible = "[And( Not( Character.IsLocalPlayer ), Character.IsPlayerInteractionShown( 'swing_scales_currency_interaction' ) )]"
	# 		# 					}
	# 		# 				}
	# 		# 			}
		
	# 		# 		}
	# 		# 	}
		
	# 		# 	hbox = {
	# 		# 		layoutpolicy_horizontal = expanding
	# 		# 		minimumsize = { -1 102 }
		
	# 		# 		margin = { 16 8 }
		
	# 		# 		background = {
	# 		# 			using = Background_Area_Dark
	# 		# 		}
		
	# 		# 		vbox = {
	# 		# 			datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 			layoutpolicy_horizontal = expanding
		
	# 		# 			hbox = {
	# 		# 				layoutpolicy_horizontal = expanding
	# 		# 				spacing = 8
		
	# 		# 				button_round = {
	# 		# 					name = "view_available_diarchs_tutorial_uses_this"
	# 		# 					visible = "[And( DiarchyWindow.CanDesignateDiarch, Not( DiarchyWindow.IsAvailableDiarchsShown ) )]"
		
	# 		# 					onclick = "[DiarchyWindow.ToggleAvailableDiarchs]"
	# 		# 					enabled = "[Not( DiarchyWindow.IsDesignateDiarchOnCooldown )]"
		
	# 		# 					tooltip = "DIARCHY_WINDOW_DIARCH_SELECTION_TOOLTIP"
		
	# 		# 					button_replace = {
	# 		# 						parentanchor = center
	# 		# 						alwaystransparent = yes
	# 		# 					}
	# 		# 				}
		
	# 		# 				button_back = {
	# 		# 					visible = "[And( DiarchyWindow.CanDesignateDiarch, DiarchyWindow.IsAvailableDiarchsShown )]"
	# 		# 					onclick = "[DiarchyWindow.ToggleAvailableDiarchs]"
	# 		# 					enabled = "[Not( DiarchyWindow.IsDesignateDiarchOnCooldown )]"
	# 		# 					tooltip = "DIARCHY_WINDOW_BACK_TOOLTIP"
	# 		# 					shortcut = "go_back"
	# 		# 					shortcut = "go_back_2"
	# 		# 					shortcut = "go_back_3"
	# 		# 				}
		
	# 		# 				vbox = {
	# 		# 					layoutpolicy_horizontal = expanding
		
	# 		# 					hbox = {
	# 		# 						layoutpolicy_horizontal = expanding
		
	# 		# 						text_single = {
	# 		# 							layoutpolicy_horizontal = expanding
		
	# 		# 							text = "[DiarchyWindow.GetDiarchLabel]"
	# 		# 							max_width = 300
	# 		# 						}
		
	# 		# 						expand = {}
		
	# 		# 						widget = {
	# 		# 							size = { 230 20 }
	# 		# 							allow_outside = yes
		
	# 		# 							hbox = {
	# 		# 								parentanchor = center
	# 		# 								allow_outside = yes
		
	# 		# 								hbox_diarch_succession_score = {
		
	# 		# 									blockoverride "breakdown_datacontext"
	# 		# 									{
	# 		# 										datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 									}
		
	# 		# 									blockoverride "succession_score"
	# 		# 									{
	# 		# 										text = "[DiarchyWindow.GetDisplayedSuccessionScore]"
	# 		# 									}
	# 		# 								}
		
	# 		# 								hbox_skills_grid = {
	# 		# 									blockoverride "skills_datamodel"
	# 		# 									{
	# 		# 										datamodel = "[DiarchyWindow.GetSkills]"
	# 		# 									}
	# 		# 								}
	# 		# 							}
	# 		# 						}
	# 		# 					}
		
	# 		# 					hbox = {
	# 		# 						layoutpolicy_horizontal = expanding
		
	# 		# 						text_single = {
	# 		# 							layoutpolicy_horizontal = expanding
		
	# 		# 							text = "[DiarchyWindow.GetDisplayedDiarch.GetUIName|U]"
	# 		# 							max_width = 300
	# 		# 							default_format = "#high"
	# 		# 						}
		
	# 		# 						expand = {}
		
	# 		# 						text_aptitude_label = {
	# 		# 							align = right
		
	# 		# 							blockoverride "breakdown_datacontext"
	# 		# 							{
	# 		# 								datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 							}
	# 		# 						}
	# 		# 					}
		
	# 		# 					hbox = {
	# 		# 						layoutpolicy_horizontal = expanding
		
	# 		# 						text_loyalty_label = {
	# 		# 							blockoverride "breakdown_datacontext"
	# 		# 							{
	# 		# 								datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 							}
	# 		# 						}
		
	# 		# 						expand = {}
		
	# 		# 						hbox = {
	# 		# 							spacing = 5
	# 		# 							datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
		
	# 		# 							icon = {
	# 		# 								name = "inactive_diarchy_warning"
	# 		# 								visible = "[And( Not( Diarchy.IsValid ), Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
	# 		# 								size = { 21 21 }
		
	# 		# 								texture = "gfx/interface/icons/symbols/icon_alert.dds"
		
	# 		# 								tooltip = "DIARCHY_WINDOW_BENEFITS_INACTIVE_DIARCHY"
	# 		# 							}
		
	# 		# 							icon = {
	# 		# 								name = "indisposed_diarch_warning"
	# 		# 								visible = "[And( And( Diarchy.IsValid, Not( DiarchyWindow.GetDisplayedDiarch.IsDiarchAble ) ), Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
	# 		# 								size = { 21 21 }
		
	# 		# 								texture = "gfx/interface/icons/symbols/icon_cross.dds"
		
	# 		# 								tooltip = "DIARCHY_WINDOW_BENEFITS_DIARCH_INDISPOSED"
	# 		# 							}
		
	# 		# 							text_single = {
	# 		# 								layoutpolicy_horizontal = expanding
	# 		# 								visible = "[And( DiarchyWindow.IsYourDiarchyShown, Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
		
	# 		# 								text = "DIARCHY_WINDOW_LIEGE_BENEFITS"
	# 		# 								align = left|nobaseline
	# 		# 								max_width = 240
	# 		# 							}
		
	# 		# 							text_single = {
	# 		# 								layoutpolicy_horizontal = expanding
	# 		# 								visible = "[And( DiarchyWindow.IsLiegeDiarchyShown, Not( StringIsEmpty( DiarchyWindow.GetModifierDescription( Character.Self ) ) ) )]"
		
	# 		# 								text = "DIARCHY_WINDOW_DIARCH_BENEFITS"
	# 		# 								align = left|nobaseline
	# 		# 								max_width = 260
	# 		# 							}
	# 		# 						}
	# 		# 					}
	# 		# 				}
	# 		# 			}
	# 		# 		}
	# 		# 	}
		
	# 		# 	vbox = {
	# 		# 		visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
	# 		# 		layoutpolicy_horizontal = expanding
	# 		# 		layoutpolicy_vertical = expanding
		
	# 		# 		margin = { 8 8 }
		
	# 		# 		background = {
	# 		# 			using = Background_Area_With_Header
	# 		# 		}
		
	# 		# 		background = {
	# 		# 			texture = "gfx/interface/illustrations/window_headers/header_my_realm.dds"
	# 		# 			alpha = 0.5
	# 		# 			fittype = centercrop
		
	# 		# 			margin_top = -32
		
	# 		# 			using = Mask_Rough_Edges
	# 		# 		}
		
	# 		# 		text_single = {
	# 		# 			visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
	# 		# 			layoutpolicy_horizontal = expanding
		
	# 		# 			text = "DIARCHY_WINDOW_SUCCESSION"
	# 		# 			align = nobaseline
		
	# 		# 			margin = { 8 0 }
	# 		# 		}
		
	# 		# 		expand = {}
		
	# 		# 		fixedgridbox = {
	# 		# 			name = "regent_succession_tutorial_uses_this"
	# 		# 			visible = "[Not(DiarchyWindow.IsAvailableDiarchsShown)]"
		
	# 		# 			datamodel = "[DiarchyWindow.GetDiarchySuccession]"
	# 		# 			addcolumn = 150
	# 		# 			addrow = 160
	# 		# 			flipdirection = yes
	# 		# 			maxhorizontalslots = 4
		
	# 		# 			item = {
	# 		# 				widget = {
	# 		# 					datacontext = "[DiarchySuccessor.GetCharacter]"
	# 		# 					size = { 150 160 }
		
	# 		# 					vbox = {
	# 		# 						portrait_head = {}
		
	# 		# 						hbox = {
	# 		# 							layoutpolicy_horizontal = expanding
	# 		# 							spacing = 4
		
	# 		# 							expand = {}
		
	# 		# 							icon = {
	# 		# 								texture = "gfx/interface/icons/loyalty.dds"
	# 		# 								size = { 30 30 }
	# 		# 								framesize = { 60 60 }
	# 		# 								frame = "[Character.GetDiarchLoyaltyIconFrame]"
		
	# 		# 								tooltipwidget = {
	# 		# 									diarch_loyalty_breakdown_tooltip = {
	# 		# 										blockoverride "header_text" {
	# 		# 											text = "DIARCHY_WINDOW_DIARCH_LOYALTY"
	# 		# 										}
	# 		# 									}
	# 		# 								}
	# 		# 							}
		
	# 		# 							vbox = {
	# 		# 								layoutpolicy_vertical = expanding
	# 		# 								margin = { 0 8 }
		
	# 		# 								divider_light = {
	# 		# 									layoutpolicy_vertical = expanding
	# 		# 								}
	# 		# 							}
		
	# 		# 							hbox_diarch_succession_score = {
	# 		# 								blockoverride "succession_score"
	# 		# 								{
	# 		# 									text = "[DiarchySuccessor.GetScore]"
	# 		# 								}
	# 		# 							}
		
	# 		# 							expand = {}
	# 		# 						}
	# 		# 					}
	# 		# 				}
	# 		# 			}
	# 		# 		}
		
	# 		# 		expand = {}
		
	# 		# 		widget = {
	# 		# 			visible = "[And( Diarchy.IsValid, DiarchyWindow.IsYourDiarchyShown)]"
	# 		# 			size = { 622 50 }
		
	# 		# 			hbox = {
	# 		# 				layoutpolicy_horizontal = expanding
		
	# 		# 				background = {
	# 		# 					using = Background_Area
	# 		# 					margin = { 8 8 }
	# 		# 				}
		
	# 		# 				button_primary = {
	# 		# 					name = "end_diarchy_tutorial_uses_this"
	# 		# 					datacontext = "[DiarchyWindow.GetDisplayedDiarch]"
	# 		# 					size = { 300 36 }
		
	# 		# 					enabled = "[Character.IsPlayerInteractionValid( DiarchyWindow.GetEndInteractionName )]"
	# 		# 					onclick = "[Character.OpenPlayerInteraction( DiarchyWindow.GetEndInteractionName )]"
		
	# 		# 					text = DIARCHY_WINDOW_END_DIARCHY
		
	# 		# 					tooltip = "[Character.GetPlayerInteractionTooltip( DiarchyWindow.GetEndInteractionName )]"
		
	# 		# 					icon = {
	# 		# 						position = { 4 4 }
	# 		# 						size = { 30 30 }
		
	# 		# 						texture = "[GetCharacterInteraction( DiarchyWindow.GetEndInteractionName ).GetIcon]"
	# 		# 					}
	# 		# 				}
	# 		# 			}
	# 		# 		}
		
	# 		# 		widget = {
	# 		# 			visible = "[And( DiarchyWindow.GetDisplayedDiarch.IsLocalPlayer, Character.IsPlayerInteractionShown( 'diarch_entrench_regency_interaction' ) )]"
	# 		# 			size = { 622 50 }
		
	# 		# 			hbox = {
	# 		# 				layoutpolicy_horizontal = expanding
		
	# 		# 				background = {
	# 		# 					using = Background_Area
	# 		# 					margin = { 8 8 }
	# 		# 				}
		
	# 		# 				button_standard = {
	# 		# 					name = "entrench_regency"
	# 		# 					datacontext = "[DiarchyWindow.GetDiarchyOwner]"
	# 		# 					size = { 300 36 }
		
	# 		# 					onclick = "[Character.OpenPlayerInteraction( 'diarch_entrench_regency_interaction' )]"
	# 		# 					enabled = "[Character.IsPlayerInteractionValid( 'diarch_entrench_regency_interaction' )]"
		
	# 		# 					text = "[Character.GetPlayerInteractionName( 'diarch_entrench_regency_interaction' )]"
		
	# 		# 					tooltip = "[Character.GetPlayerInteractionTooltip( 'diarch_entrench_regency_interaction' )]"
		
	# 		# 					icon = {
	# 		# 						position = { 4 4 }
	# 		# 						size = { 30 30 }
	# 		# 						texture = "[GetCharacterInteraction( 'diarch_entrench_regency_interaction' ).GetIcon]"
	# 		# 					}
	# 		# 				}
	# 		# 			}
	# 		# 		}
	# 		# 	}
		
	# 		# 	vbox_character_list = {
	# 		# 		datacontext = "[DiarchyWindow.GetAvailableDiarchs]"
	# 		# 		visible = "[DiarchyWindow.IsAvailableDiarchsShown]"
	# 		# 		layoutpolicy_horizontal = expanding
	# 		# 		layoutpolicy_vertical = expanding
	# 		# 		minimumsize = { -1 420 }
		
	# 		# 		blockoverride "container_implementation" {
	# 		# 			fixedgridbox = {
	# 		# 				name = "characters_grid"
	# 		# 				datamodel = "[CharacterSelectionList.GetList]"
	# 		# 				visible = "[Not( CharacterSelectionList.IsBuildingList )]"
	# 		# 				layoutpolicy_horizontal = expanding
	# 		# 				addcolumn = 604
	# 		# 				addrow = 122
		
	# 		# 				item = {
	# 		# 					widget_diarch_candidate_item = {
	# 		# 						datacontext = "[CharacterListItem.GetCharacter]"
	# 		# 						size = { 604 122 }
	# 		# 					}
	# 		# 				}
	# 		# 			}
	# 		# 		}
	# 		# 	}
	# 		# }
		
	# 		# textbox = {
	# 		# 	name = "TooltipTextShortcut"
	# 		# 	layoutpolicy_horizontal = expanding
	# 		# 	using = DefaultTooltipText
	# 		# 	margin = { 10 5 }
	# 		# 	margin_top = 10
	# 		# }
	# 	}
	
	# 	# vbox = {
	# 	# 	set_parent_size_to_minimum = yes
	# 	# 	margin = { 20 5 }

	# 	# 	hbox = {
	# 	# 		layoutpolicy_horizontal = expanding
	# 	# 		spacing = 10

	# 	# 		background = {
	# 	# 			name = "header"
	# 	# 			texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
	# 	# 			spriteType = Corneredstretched
	# 	# 			margin = { 15 0 }
	# 	# 			texture_density = 2

	# 	# 			modify_texture = {
	# 	# 				name = "mask"
	# 	# 				texture = "gfx/interface/component_masks/mask_title_big_top.dds"
	# 	# 				spriteType = Corneredstretched
	# 	# 				spriteborder = { 160 0 }
	# 	# 				blend_mode = alphamultiply
	# 	# 				alpha = 0.5
	# 	# 			}
	# 	# 		}

	# 	# 		block "header_tt" {
	# 	# 			margin_bottom = 12
	# 	# 		}

	# 	# 		hbox = {
	# 	# 			layoutpolicy_horizontal = expanding

	# 	# 			block "header_additions" {
	# 	# 				hbox = {}
	# 	# 			}

	# 	# 			vbox = {
	# 	# 				name = "FancyHeader"
	# 	# 				layoutpolicy_horizontal = expanding
	# 	# 				alwaystransparent = no

	# 	# 				text_single = {
	# 	# 					layoutpolicy_horizontal = expanding
	# 	# 					autoresize = yes
	# 	# 					name = "title"

	# 	# 					fontsize_min = 14
	# 	# 					using = Font_Size_Medium

	# 	# 					block "title_text" {
	# 	# 						margin = { 0 8 }
	# 	# 					}
	# 	# 					fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 				}

	# 	# 				# use subtitle_text blockoverride or replace this entire block
	# 	# 				block "subheading"
	# 	# 				{
	# 	# 					text_single = {
	# 	# 						layoutpolicy_horizontal = expanding
	# 	# 						autoresize = yes
	# 	# 						fontsize_min = 14
	# 	# 						using = Font_Size_Small
	# 	# 						block "subtitle_text" {
	# 	# 							text = ""
	# 	# 						}
	# 	# 						fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 						max_width = 400
	# 	# 					}
	# 	# 				}
	# 	# 			}
	# 	# 		}

	# 	# 		expand = {}

	# 	# 		vbox = {
	# 	# 			layoutpolicy_vertical = expanding

	# 	# 			text_single = {
	# 	# 				name = "concept_link"
	# 	# 				layoutpolicy_horizontal = expanding
	# 	# 				block "concept_link" {
	# 	# 					raw_text = "#D Missing concept link!#!"
	# 	# 				}

	# 	# 				fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 			}
	# 	# 		}
	# 	# 	}

	# 	# 	# Override main_description if you plan to build a fully custom pop out, otherwise override the components
	# 	# 	block "main_description"
	# 	# 	{
	# 	# 		block "extra_data" {}

	# 	# 		textbox = {
	# 	# 			name = "warning_description"

	# 	# 			using = DefaultTooltipText
	# 	# 			layoutpolicy_horizontal = expanding
	# 	# 			multiline = yes
	# 	# 			block "warning_description_text" {}
	# 	# 			fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 			alwaystransparent = no
	# 	# 		}

	# 	# 		textbox = {
	# 	# 			name = "above_description"

	# 	# 			max_width = 400
	# 	# 			using = DefaultTooltipText
	# 	# 			layoutpolicy_horizontal = expanding
	# 	# 			multiline = yes
	# 	# 			block "above_description_text" {}
	# 	# 			fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 			alwaystransparent = no
	# 	# 		}

	# 	# 		# NOTE: This edit box is filled by TooltipInfo.GetTintColor from code in order to set the correct size when the tooltip is created and positioned and then it uses the text property specified here in the next frames
	# 	# 		textbox = {
	# 	# 			name = "Description"
	# 	# 			layoutpolicy_horizontal = expanding
	# 	# 			max_width = 400
	# 	# 			using = DefaultTooltipText
	# 	# 			multiline = yes
	# 	# 			block "description_text" {}
	# 	# 			fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 			alwaystransparent = no
	# 	# 		}

	# 	# 		block "extra_data_after_description" {}

	# 	# 		# Things like "click to X", hotkeys etc
	# 	# 		textbox = {
	# 	# 			name = "input_info"
	# 	# 			layoutpolicy_horizontal = expanding
	# 	# 			margin_top = 10
	# 	# 			using = DefaultTooltipText
	# 	# 			multiline = yes
	# 	# 			block "input_info_text" {}
	# 	# 			fonttintcolor = "[TooltipInfo.GetTintColor]"
	# 	# 		}
	# 	# 	}

	# 	# 	textbox = {
	# 	# 		name = "TooltipTextShortcut"
	# 	# 		layoutpolicy_horizontal = expanding
	# 	# 		using = DefaultTooltipText
	# 	# 		margin = { 10 5 }
	# 	# 		margin_top = 10
	# 	# 	}
	# 	# }
	
	# }


	# type elf_dest_aeluran_respect_hbox_complex_bar_progress = hbox {
	# 	allow_outside = yes

	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentLeftWidth]"
	# 		allow_outside = yes

	# 		block "empty" {
	# 			background = {
	# 				block "texture_empty" {
	# 					texture = "gfx/interface/progressbars/progress_black.dds"
	# 				}
	# 			}
	# 		}
	# 	}

	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[DiarchyWindow.GetAlternativePowerLevels]"
	# 		allow_outside = yes

	# 		block "filled" {
	# 			background = {
	# 				block "texture_filled" {
	# 					texture = "gfx/interface/progressbars/progress_standard.dds"
	# 				}
	# 			}
	# 		}
	# 	}

	# 	hbox = {
	# 		layoutpolicy_horizontal = expanding
	# 		layoutpolicy_vertical = expanding
	# 		layoutstretchfactor_horizontal = "[ComplexBar.GetCurrentRightWidth]"
	# 		allow_outside = yes

	# 		block "empty" {
	# 			background = {
	# 				block "texture_empty" {
	# 					texture = "gfx/interface/progressbars/progress_black.dds"
	# 				}
	# 			}
	# 		}
	# 	}
	# }

	type vbox_maa_stats = vbox {
		margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin =  { 10 2 }

			text_single = {
				name = "title"
				text = "[MenAtArmsType.GetNameNoTooltip]"
				using = Font_Size_Medium

			}

			expand = {}

			hbox = {
				tooltip = "MV_CREATE_REGIMENT_MAX_SIZE_TT"
				using = tooltip_ne

				icon = {
					name = "icon_maa"
					texture = [MenAtArmsType.GetIcon]
					size = { 30 30 }
				}

				text_single = {
					name = "soldier count"
					text = "MV_CREATE_REGIMENT_SIZE"
				}
			}
		}

		vbox_maa_stats_numbers_old_version = {
			visible = "[Not(IsMixedSiegeAndFighterMAA)]"
			layoutpolicy_horizontal = expanding
		}

		vbox_maa_stats_numbers = {
			visible = "[IsMixedSiegeAndFighterMAA]"
			layoutpolicy_horizontal = expanding
		}

		block "type_text"
		{
			hbox_maa_type_text = {
				layoutpolicy_horizontal = expanding
			}
		}
	}

	# Requires MenAtArmsType data context
	type vbox_maa_stats_numbers_old_version = vbox_maa_stats_numbers_base_original_version
	{
		datacontext = "[GetNullProvince]"
	}

	# Requires MenAtArmsType data context
	type vbox_maa_stats_numbers = vbox_maa_stats_numbers_base
	{
		datacontext = "[GetNullProvince]"
	}

	type vbox_maa_stats_numbers_base = vbox {
		vbox = {
			visible = "[IsMixedSiegeAndFighterMAA]"
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }
			margin_bottom = 5

			background = {
				using = Background_Area
				margin = { 3 3 }
				margin_right = 7
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				block "siege_tt"
				{
					tooltip = "REGIMENT_SIEGE_TT"
				}
				using = tooltip_se
				spacing = 3
				margin_left = -5

				icon = {
					block "siege_icon_size"
					{
						size = { 55 55 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_siege_progress.dds"
				}

				text_single = {
					block "siege_stat"
					{
						text = "REGIMENT_SIEGE"
					}
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}

				expand = {}
			}

			block "siege_effective_level"
			{
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "siege_tier"
					text = "REGIMENT_SIEGE_MAX_FORT_LEVEL"
					align = left
				}
			}
		}

		hbox = {
			name = "stats"
			visible = "[MenAtArmsType.FightsInMainPhase]"
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }

			background = {
				using = Background_Area
			}

			block "stat_spacing"
			{
			}

			hbox = {
				block "damage_tt"
				{
					tooltip = "REGIMENT_DAMAGE_TT"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_damage.dds"
				}

				text_single = {
					name = "label"
					block "damage_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'damage' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "toughness_tt"
				{
					tooltip = "REGIMENT_TOUGHNESS_TT"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_toughness.dds"
				}

				text_single = {
					name = "label"
					block "toughness_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'toughness' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "pursuit_tt"
				{
					tooltip = "REGIMENT_PURSUIT_TT"
					# fade out if 0
					alpha = "[Select_float(GreaterThan_CFixedPoint(MenAtArmsType.GetStat( GetPlayer, Province.Self, 'pursuit' ),'(CFixedPoint)0'), '(float)1.0','(float)0.4')]"
				}
				using = tooltip_se
				spacing = 3


				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_pursuit.dds"
				}

				text_single = {
					name = "label"
					block "pursuit_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'pursuit' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "screen_tt"
				{
					tooltip = "REGIMENT_SCREEN_TT"
					# fade out if 0
					alpha = "[Select_float(GreaterThan_CFixedPoint(MenAtArmsType.GetStat( GetPlayer, Province.Self, 'screen' ),'(CFixedPoint)0'), '(float)1.0','(float)0.4')]"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_screen.dds"
				}

				text_single = {
					name = "label"
					block "screen_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'screen' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}
		}
	}

	type vbox_maa_stats_numbers_base_original_version = vbox {
		vbox = {
			visible = "[Not( MenAtArmsType.FightsInMainPhase )]"
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }
			margin_bottom = 5

			background = {
				using = Background_Area
				margin = { 3 3 }
				margin_right = 7
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				block "siege_tt"
				{
					tooltip = "REGIMENT_SIEGE_TT"
				}
				using = tooltip_se
				spacing = 3
				margin_left = -5

				icon = {
					block "siege_icon_size"
					{
						size = { 55 55 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_siege_progress.dds"
				}

				text_single = {
					block "siege_stat"
					{
						text = "REGIMENT_SIEGE"
					}
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}

				expand = {}
			}

			block "siege_effective_level"
			{
				text_single = {
					layoutpolicy_horizontal = expanding
					name = "siege_tier"
					text = "REGIMENT_SIEGE_MAX_FORT_LEVEL"
					align = left
				}
			}
		}

		hbox = {
			name = "stats"
			visible = "[MenAtArmsType.FightsInMainPhase]"
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }

			background = {
				using = Background_Area
			}

			block "stat_spacing"
			{
			}

			hbox = {
				block "damage_tt"
				{
					tooltip = "REGIMENT_DAMAGE_TT"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_damage.dds"
				}

				text_single = {
					name = "label"
					block "damage_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'damage' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "toughness_tt"
				{
					tooltip = "REGIMENT_TOUGHNESS_TT"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_toughness.dds"
				}

				text_single = {
					name = "label"
					block "toughness_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'toughness' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "pursuit_tt"
				{
					tooltip = "REGIMENT_PURSUIT_TT"
					# fade out if 0
					alpha = "[Select_float(GreaterThan_CFixedPoint(MenAtArmsType.GetStat( GetPlayer, Province.Self, 'pursuit' ),'(CFixedPoint)0'), '(float)1.0','(float)0.4')]"
				}
				using = tooltip_se
				spacing = 3


				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_pursuit.dds"
				}

				text_single = {
					name = "label"
					block "pursuit_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'pursuit' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}

			hbox = {
				block "screen_tt"
				{
					tooltip = "REGIMENT_SCREEN_TT"
					# fade out if 0
					alpha = "[Select_float(GreaterThan_CFixedPoint(MenAtArmsType.GetStat( GetPlayer, Province.Self, 'screen' ),'(CFixedPoint)0'), '(float)1.0','(float)0.4')]"
				}
				using = tooltip_se
				spacing = 3

				icon = {
					name = "icon"
					block "stat_icon_size"
					{
						size = { 40 40 }
					}
					texture = "gfx/interface/icons/regimenttypes/unit_stat_screen.dds"
				}

				text_single = {
					name = "label"
					block "screen_stat"
					{
						text = "[MenAtArmsType.GetStat( GetPlayer, Province.Self, 'screen' )|0]"
					}
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
					min_width = 25
				}
			}
		}
	}
}